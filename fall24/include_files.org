#+title: Algorithmic Thinking Classroom Adaptation
#+author: Marcus Birkenkrahe
#+subtitle: CSC 240 Data Structures Lyon College Fall 2024
#+startup: overview hideblocks indent entitiespretty:
#+options: toc:nil num:nil ^:nil:
#+property: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> <time.h> :results output :exports both
* Include Files

- The =#+property= Org-header argument includes the following libraries:
  + =<stdio.h>= for input and output operations (=printf=, =scanf=)
  + =<stdlib>= for memory allocation and deallocation (=malloc=, =free=),
    program control (=exit=, =abort=), conversion functions (=atoi=),
    random numbers (=rand=), searching, sorting.
  + =<string.h>= for string manipulation (=strlen=, =strcpy=, =strcmp=).
  + =<time.h>= for manipulating date and time (=clock_t=)

- Common contents of a header file:
  + Function declarations (prototypes for functions defined elsewhere)
  + Macro definitions (preprocessor macros using =#define=)
  + Type definitions (=typedef= and data structures)
  + Constant definitions (constant values using =const= or =#define=)
  + Inline functions (small functions defined with =inline=)

- Here is an example header file ~example.h~:
  #+begin_src C :tangle example.h :main no :results none
    // example.h C header file
    #ifndef EXAMPLE_H
    #define EXAMPLE_H

    // function declaration
    void print_hello();

    // Macro definition
    #define PI 3.14259

    // Type definition
    typedef struct {
      int x;
      int y;
    } Point;

    // Constant definition
    const int MAX_SIZE = 100;

    #endif // EXAMPLE_H
  #+end_src

- The top two and the last line are header guards that prevent
  multiple inclusions of the same header file.

- To use ~example.h~, you include it in your source file. The file name
  between the quotation marks must be a valid path to the file:
  #+begin_src C
    // main.c
    #include <stdio.h>  // standard Input Output
    #include "/home/aletheia/GitHub/org/fall24/example.h" // handcrafted example header file

    void print_hello() { // prototype declared in example.h
      printf("Hello, World!\n");
    }
    // main function
    int main() {
      print_hello();  // use function
      printf("PI = %f\n", PI); // use macro
      Point p = {1,2}; // use typedef
      printf("Point p: (%d,%d)\n", p.x, p.y);
      printf("MAX_SIZE = %d\n", MAX_SIZE);
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Hello, World!
  : PI = 3.142590
  : Point p: (1,2)
  : MAX_SIZE = 100

- In an Org-mode code block, you can add it as a =:includes= header
  argument: ~:includes <stdio.h> <stdlib.h> <string.h> <time.h>~ or you
  can add it at the top of your Org-mode file in a =#+property:= line
  (that's what I've done here).

* Exercise
** Problem
- Create another example header file ~example2.h~. In the file:
  1) Define the Euler number ~EULER~ (2.71828) as a preprocessor macro.
  2) Declare the prototype of a =void= function ~nada~ without arguments.
  3) Define a type ~Point~ (with =int= coordinates ~x~, ~y~), and a type ~Line~
     (with ~Point ~p1~ and ~Point~ ~p2~).
  4) Define a =const= floating-point value ~TAX_RATE~ of 19%.
  5) Secure the header file against multiple inclusion.
  6) Tangle the code to create a source code file ~example2.h~.
  7) Write a function ~nada~ for the prototype that prints "nada".
  8) Write a test function =main= that includes ~example2.h~, prints ~EULER~
     and ~TAX_RATE~, calls ~nada~, defines two points at (0,0) and (1,1)
     and a line through them, and prints the points.
   
- Sample output    
  #+begin_example
    : Euler number: 2.718280
    : nada
    : Line l through (0,0) and (1,1)
    : TAX_RATE: 0.190000
  #+end_example

- Header file ~example2.h~:
    #+begin_src C :tangle example2.h :main no :results none
      // example2.h

      // macro definition

      // function prototype

      // Type definition

      // Type definition

      // const value

    #+end_src

  - Test file ~main.c~:
    #+begin_src C :tangle main.c

    #+end_src

** Solution

  - Header file ~example2.h~:
    #+begin_src C :tangle example2.h :main no :results none
      // example2.h
      #ifndef EXAMPLE2_H
      #define EXAMPLE2_H
      // macro definition
      #define EULER 2.71828
      // function prototype
      void nada();
      // Type definition
      typedef struct {
        int x;
        int y;
      } Point;
      // Type definition
      typedef struct {
        Point p1;
        Point p2;
      } Line;
      // const value
      const float TAX_RATE = 0.19;
      #endif // EXAMPLE2_H
    #+end_src

  - Test file ~main.c~:
    #+begin_src C :tangle main.c
      #include "/home/aletheia/GitHub/org/fall24/example2.h"

      void nada(void) {
        printf("nada\n");
      }

      int main() {
        printf("Euler number: %f\n", EULER);
        nada();
        Point p1 = {0,0};
        Point p2 = {1,1};
        Line l = {p1,p2};
        printf("Line l through (%d,%d) and (%d,%d)\n", l.p1.x,l.p1.y,l.p2.x,l.p2.y);
        printf("TAX_RATE: %f\n", TAX_RATE);
        return 0;
      }
    #+end_src

    #+RESULTS:
    : Euler number: 2.718280
    : nada
    : Line l through (0,0) and (1,1)
    : TAX_RATE: 0.190000

* Sources

Zingaro D (2024). Algorithmic Thinking (2e), NoStarch Press. URL:
[[https://www.danielzingaro.com/alg2/][danielzingaro.com/alg2/]]

