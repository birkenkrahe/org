#+TITLE:45 Programming Languages In 45 Minutes 
#+AUTHOR:45 Programming Languages In 45 Minutes 
#+SUBTITLE:45 Programming Languages In 45 Minutes 
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+PROPERTY: header-args:python :session *Python* :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
* Overview

The purpose of this short session is to show and discuss programming
languages with you - not as a theoretical but as a practical thing:
I'm going to demonstrate how not one but many languages are used in
class so that you have an idea what awaits you at Lyon College if you
study computer or data science.

*These are some questions I'd like to answer:*
1. What is a programming language?
2. How many programming languages are there?
3. What is a programming environment?
4. What is the difference between a programming and a 'natural' language?
5. What is 'natural language processing'?
6. What is Emacs? What is Org-mode?
7. What is Literate Programming?
8. How many programming languages do you 'speak'?
9. Why do you need to know more than one programming language?
10. Which programming languages should you learn (first)?

This file is available as an Org-mode notebook on GitHub at
[[https://tinyurl.com/trio-languages][tinyurl.com/trio-languages]].

* What is a programming language? ([[https://resources.github.com/software-development/what-is-a-programming-language/][GitHub]])

A programming language is a formal language to express instructions
for a computer. It is more like mathematical expressions than like
spoken languages.

Here is a simple example in the C programming language
#+begin_src C :exports both
  int main ()
  {

    printf("Hello, class!");

    return 0;
  }
#+end_src

#+RESULTS:
: Hello, class!


* How many programming languages are there?

- Spoken ("natural") languages: more than 7,000 - hard to say because
  we don't really know what language is ("Language is self-expression"
  defers the definition to "self"), where it comes from, or when a
  dialect is a new language (Source: [[https://www.worldatlas.com/society/how-many-languages-are-there-in-the-world.html][WorldAtlas]]).
  
- Programming ("formal") languages: there are more than 8,000
  historical programming languages but currently used about 700
  (Source: [[https://resources.github.com/software-development/what-is-a-programming-language/][GitHub]]).


* What is a programming environment?

A programming environment is software that allows you to write and run
programs on a computer so that you get the same results when you apply
the same conditions.

The fundamental object of such an environment is the file - on today's
computers, everything is organized as a file. Therefore it's important
to understand how files are created, changed, moved around, and found.

At Lyon, in my computer and data science classes, I force students to
use Emacs, the "hacker's editor", to write and run code - this is
highly unusual since Emacs is supposed to have too steep a learning
curve for beginners (I don't think it does or if it does, it's worth
it - cp. Birkenkrahe, 2023).


* What is the difference between a programming and a 'natural' language?

* What is 'natural language processing'?

* What is Emacs? What is Org-mode?

* What is 'Literate Programming'?

* How many programming languages do you 'speak'?

Incidentally, these are also the 13 programming languages that you
will learn when you study computer or data science at Lyon College.

** R

** SQLite

** Python

** C

** C++

** Java

** bash

** Lisp

** JavaScript

** Markdown

** IPython

** HTML

** Snap!



* Why do you need to know more than one programming language?

* Which programming languages should you learn (first)?

* Bonus question: Why do I need to learn any programming language? (GAI)


* SOMEDAY What's the difference between Scratch and Python?

- What does it look like?
  #+attr_html: :width 400px:
  [[./img/scratch.png]]

  #+attr_html: :width 400px:
  [[./img/python.png]]

- Answer:  
  #+begin_quote
  *Scratch* is a high-level visual, block-based, script language:
  Scratch commands are organized as scripts which need to be run, and
  you don't have to know the precise form of commands because they're
  hardcoded as blocks. The programming is done in a script area, and
  the output is shown on a stage using "sprite" objects (like the
  cat). 

  *Python* is a high-level, interpreted/compiled programming language:
  you can run it in its interpreted form from a console, or you can
  run Python scripts (like Scratch scripts). It is used for teaching
  how to program but it is also used in professional settings. It is
  an important language for data science and machine learning.

  Both Scratch and Python are dynamically typed: the data type of
  variables is not declared or checked at compile time (when the
  executable program is created). It assigns values to variables and
  binds them to memory containers that can store any type of data.

  Both languages are considered easy to learn for beginners.
  #+end_quote

- [[https://www.tiobe.com/tiobe-index/][TIOBE Index June 2024]]:
  #+attr_html: :width 400px:
  [[./img/tiobe_june_2024.png]]


* References

- Birkenkrahe (2023). Teaching Data Science with Literate Programming
  Tools. [[https://www.mdpi.com/2673-6470/3/3/15][URL]]
- GitHub (2024). What is a programming language? [[https://resources.github.com/software-development/what-is-a-programming-language/][URL]]
- WorldAtlas (2024). How Many Languages Are There In The World? [[https://www.worldatlas.com/society/how-many-languages-are-there-in-the-world.html][URL]]


