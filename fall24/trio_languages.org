#+TITLE:45 Programming Languages In 45 Minutes
#+AUTHOR:45 Programming Languages In 45 Minutes
#+SUBTITLE:45 Programming Languages In 45 Minutes
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+PROPERTY: header-args:python :session *Python* :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
* Overview

The purpose of this short session is to show and discuss programming
languages with you - not as a theoretical but as a practical thing:
I'm going to demonstrate how not one but many languages are used in
class so that you have an idea what awaits you at Lyon College if you
study computer or data science.

It will emerge that you won't see 45 but only 15 languages today but
hopefully you'll learn something anyway!

*These are some questions I'd like to answer:*
1. What is a programming language?
2. How many programming languages are there?
3. What is a programming environment?
4. What is the difference between a programming and a 'natural' language?
5. What is 'natural language processing'?
6. What is Emacs? What is Org-mode?
7. What is Literate Programming?
8. How many programming languages do you 'speak'?
9. Why do you need to know more than one programming language?
10. Which programming languages should you learn (first)?

This file is available as an Org-mode notebook on GitHub at
[[https://tinyurl.com/trio-languages][tinyurl.com/trio-languages]].

* What is a programming language?

A programming language is a /formal language/ to express instructions
for a computer. It is more like mathematical expressions than like
spoken languages.

Here is a simple example in the C programming language
#+begin_src C :exports both
  printf("Hello, class!");
#+end_src

#+RESULTS:
: Hello, class!

/Formal/ in this context means that a programming language requires you
to follow its syntax (its set of rules) to the letter. Any deviation,
no matter how small, is punished with a "compilation error".

A /compilation error/ means that the computer cannot understand your
code (aka /source code/) at all, and cannot use it to derive
instructions from it. It will give up talking to you.

You can see this from the simple program above:
#+begin_src C
  print("Hello, class!")
#+end_src

#+RESULTS:

What's different, and what does the error message mean?
#+attr_html: :width 800px:
[[./img/compilation_error.png]]

Answer:
#+begin_quote
Two errors were highlighted: the command =print= is not recognized (the
compiler rightly thinks you meant to write =printf=), and a semi-colon ;
is missing at the end of the command.

We've violated the syntactical rules twice:
1) we tried to use a function =print= that does not exist
2) we've forgotten that every command in the C language must end with a ;
#+end_quote

Philosophical-political extension:
#+begin_quote
At [[https://resources.github.com/software-development/what-is-a-programming-language/][GitHub]], programming languages are said to "facilitate global
conversations between machines and [software] developers, wherever
they may be." That's /globalism[fn:2]/ for software developers (after
all, GitHub is owned by Microsoft).
#+end_quote

** So many terms

One of the issues when learning how to program is the sheer amount of
new words. In this short introductory section alone we used the
following terms:



* How many programming languages are there?

- Spoken ("natural") languages: more than 7,000 - hard to say because
  we don't really know what language is ("Language is self-expression"
  defers the definition to "self"), where it comes from, or when a
  dialect is a new language (Source: [[https://www.worldatlas.com/society/how-many-languages-are-there-in-the-world.html][WorldAtlas]]).

- Programming ("formal") languages: there are more than 8,000
  historical programming languages but currently used about 700
  (Source: [[https://resources.github.com/software-development/what-is-a-programming-language/][GitHub]]).


* What is a programming environment?

A programming environment is software that allows you to write and run
programs on a computer so that you get the same results when you apply
the same conditions.

The fundamental object of such an environment is the file - on today's
computers, everything is organized as a file. Therefore it's important
to understand how files are created, changed, moved around, and found.

At Lyon, in my computer and data science classes, I force students to
use Emacs, the "hacker's editor", to write and run code - this is
highly unusual since Emacs is supposed to have too steep a learning
curve for beginners (I don't think it does or if it does, it's worth
it - cp. Birkenkrahe, 2023).


* What is the difference between a programming and a 'natural' language?

* What is 'natural language processing'?

* What is Emacs? What is Org-mode?

* What is 'Literate Programming'?

* How many programming languages do you 'speak'?

Incidentally, these are also the 15 programming languages that you
will learn when you study computer or data science at Lyon College.

I know a few more programming languages but I don't use them on a
regular basis. Like natural languages, if you don't use a programming
language for a while, you begin to forget it - but it never goes away
altogether[fn:1].

** R

** SQLite/SQL
** Python

** C/C++
** Java

** bash

** Lisp

** JavaScript

** Markdown
** LaTeX
** IPython

** HTML

** Snap!

* Why do you need to know more than one programming language?

* Which programming languages should you learn (first)?

* Bonus: Why do I need to learn any programming language? (What about AI?)


* Bonus: What's the difference between Scratch and Python?

- What does it look like?
  #+attr_html: :width 400px:
  [[./img/scratch.png]]

  #+attr_html: :width 400px:
  [[./img/python.png]]

- Answer:
  #+begin_quote
  *Scratch* is a high-level visual, block-based, script language:
  Scratch commands are organized as scripts which need to be run, and
  you don't have to know the precise form of commands because they're
  hardcoded as blocks. The programming is done in a script area, and
  the output is shown on a stage using "sprite" objects (like the
  cat).

  *Python* is a high-level, interpreted/compiled programming language:
  you can run it in its interpreted form from a console, or you can
  run Python scripts (like Scratch scripts). It is used for teaching
  how to program but it is also used in professional settings. It is
  an important language for data science and machine learning.

  Both Scratch and Python are dynamically typed: the data type of
  variables is not declared or checked at compile time (when the
  executable program is created). It assigns values to variables and
  binds them to memory containers that can store any type of data.

  Both languages are considered easy to learn for beginners.
  #+end_quote

- [[https://www.tiobe.com/tiobe-index/][TIOBE Index June 2024]]:
  #+attr_html: :width 400px:
  [[./img/tiobe_june_2024.png]]


* References

- Birkenkrahe (2023). Teaching Data Science with Literate Programming
  Tools. [[https://www.mdpi.com/2673-6470/3/3/15][URL]]
- GitHub (2024). What is a programming language? [[https://resources.github.com/software-development/what-is-a-programming-language/][URL]]
- WorldAtlas (2024). How Many Languages Are There In The World? [[https://www.worldatlas.com/society/how-many-languages-are-there-in-the-world.html][URL]]

* Footnotes
[fn:2]Globalism has multiple meanings but I associate the term mainly
with a world-view that transcends national borders and cultural
boundaries. Some jobs are more 'global' than others - anything related
to the digital world that is transacted over the Internet for
example. Though when you look at the details, local conditions are not
unimportant - e.g. even when you develop web sites, you need to think
of your customers as being members of a particular culture, speaking a
particular language, etc.

[fn:1]Other languages I know (but don't use): BASIC, FORTRAN (those
were my two first languages), Pascal.
