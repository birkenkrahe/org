#+TITLE: Simple Array Operations
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Data Structures with C++ - Lyon College - Fall 2024
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h>
* Context

We're dealing with basic array operations in C, focusing on input,
output, sum, and search functionalities. The array size is fixed at
5 integers.

* Tasks

- Input: Read 5 integer numbers from the user.
- Display: Print out all the numbers.
- Sum: Calculate and display the sum of all numbers.
- Search: Ask for a number and check if it exists in the array.

* Steps

1. Declare an array of size 5.
2. Use a loop for input.
3. Use another loop for display and sum calculation.
4. Implement a search function using a third loop.

* Sample Input and Output

Sample input:
- Array: =4 -3 100 -1 1=
- Number to search for in the array: =100=.

- Sample output:
  #+begin_example
  Array elements entered: 4 -3 100 -1 1
  Sum of array elements = 101.
  Which number should I search for?
  100 was found in array (1 times).
  #+end_example

* Hints

- Write a program first that initializes an array in the source code
  and check your algorithm first.

- Remember to run =C-c C-c= every time you write a line of code to check
  the syntax. Save your file often with =C-x C-s=.

- When you're sure that the algorithm works, initialize the array with
  a shell code block looking like this, where the first five numbers
  are the array elements and the last number is the searched number.

  #+begin_example bash
    gcc main.c -o main
    echo 4 -3 100 -1 1 100 | ./main
  #+end_example

- Note: even if you're not on Linux right now, you can execute these
  commands in Emacs' eshell (=M-x eshell=), which simulates linux, as
  long as you have the C compiler GCC installed.

- This test code will only work if you tangled the file =main.c= first.

- You can make the program more general and easier to maintain if you
  set the array size as a constant (so that larger arrays than 5 can
  be processed).

* Submission

1. Org-mode file with complete meta data: =TITLE=, =AUTHOR= (with pledge),
   =SUBTITLE= (course information), =PROPERTY= (C code blocks) and =STARTUP=
   (for file startup in Emacs). Compare [[https://lyon.instructure.com/courses/2623/assignments/33110][previous exercise]].

2. Include a short description on how you tackled the problem, for
   example by explaining your steps (outside of the source code
   block).

3. Your source code should be accompanies by minimal comments to help
   you understand it better later. Your source code block should have
   the additional header argument =:tangle main.c= so that you can
   tangle the file with =M-x org-babel-tangle= and run it separately.

4. Your file must pass the test case, and input and output must be
   part of your submission.

* Solution

The complete sample solution file is [[https://github.com/birkenkrahe/org/blob/e383155ed248c181622ce8692a143d120ec75551/fall24/alg1/simple_array_operations.org][on GitHub]] (available after the
deadline). There is also a video on YouTube.

We'll use a single array to store integers, implement loops for
input/output, and a simple linear search for finding a number.

** Code v1: without user input

This code can just be run here because the array is fixed, so no loop
is needed to initialize the array. My sample solution has too many
comments (for instruction) - less sometimes is more.

#+begin_src C
  /**********************************************************************/
  /* Get integer array from user, print it, sum its elements, search it */
  /* for a given number. Author: Marcus Birkenkrahe License: GPLv3 - V1 */
  /**********************************************************************/

  // define array size
  #define SIZE 5

  // variable declarations and definitions
  int A[SIZE] = {4,-3,100,-1,1}; // input
  int search = 100; // input
  int sum = 0; // output
  int i; // loop counter (display and summation)
  int found = 0; // flag for search

  // display and sum array elements
  printf("Array elements: ");
  for (i = 0; i < SIZE; i++) {
    printf("%d ", A[i]);
    sum+=A[i];
   }
  // display summation result
  printf("\nSum of array elements = %d.\n",sum);

  // number to search in array
  printf("Number to search for: %d",search);
  // search array with loop for user input
  for (i = 0; i < SIZE; i++) {
    if (A[i] == search) {
      found++;
    }
   }
  if (found == 0)
    printf("\n%d not found in array.",search);
   else
     printf("\n%d was found in array (%d times).",search, found);
#+end_src

#+RESULTS:
: Array elements: 4 -3 100 -1 1
: Sum of array elements = 101.
: Number to search for: 100
: 100 was found in array (1 times).

** Code v2: with user input

This code is tested below for any input array, and for any number to
be searched. Another loop is needed to =scanf= the array elements.

#+begin_src C :tangle main.c :results none
  /**********************************************************************/
  /* Get integer array from user, print it, sum its elements, search it */
  /* for a given number. Author: Marcus Birkenkrahe License: GPLv3 - V2 */
  /**********************************************************************/
  // define array size
  #define SIZE 5

  // variable declarations and definitions
  int A[SIZE]; // input
  int search; // input
  int sum = 0; // output
  int i; // loop counter (display and summation)
  int found = 0; // flag for search

  // get user input
  printf("Enter five integer numbers: ");
  for (i = 0; i < SIZE; i++) {
    scanf("%d",&A[i]);
   }

  // ask for number to search in array
  printf("\nWhich number should I search for? ");
  // get number to be searched in array
  scanf("%d",&search);

  // display and sum array elements
  printf("\nArray elements entered: ");
  for (i = 0; i < SIZE; i++) {
    printf("%d ", A[i]);
    sum+=A[i];
   }
  // display summation result
  printf("\nSum of array elements = %d.",sum);

  // search array with loop for user input
  for (i = 0; i < SIZE; i++) {
    if (A[i] == search) {
      found++;
    }
   }
  if (found == 0)
    printf("\n%d not found in array.",search);
   else
     printf("\n%d was found in array (%d times).",search, found);
#+end_src

Testing:
#+begin_src bash :results output :exports both
  gcc main.c -o main
  echo 4 -3 100 -1 1 100 | ./main
#+end_src

#+RESULTS:
: Enter five integer numbers:
: Which number should I search for?
: Array elements entered: 4 -3 100 -1 1
: Sum of array elements = 101.
: 100 was found in array (1 times).

** Code v3: Improved and streamlined

The input, printing, summation and searching can all be done in one
loop. The number to search for has to be entered first though. The
source code tangles to a file =main2.c=.

#+begin_src C :tangle main2.c :results none
  /**********************************************************************/
  /* Get integer array from user, print it, sum its elements, search it */
  /* for a given number. Author: Marcus Birkenkrahe License: GPLv3 - V3 */
  /**********************************************************************/
  // define array size
  #define SIZE 5

  // variable declarations and definitions
  int A[SIZE]; // input
  int search; // input
  int sum = 0; // output
  int i; // loop counter (display and summation)
  int found = 0; // flag for search

  // ask for number to search in array
  printf("Which number should I search for? ");
  // get number to be searched in array
  scanf("%d",&search);
  printf("%d\n", search);

  // get user input, display and sum array elements
  printf("Enter five integer numbers: ");
  for (i = 0; i < SIZE; i++) {
    scanf("%d",&A[i]);
    printf("%d ", A[i]);
    sum+=A[i];
    if (A[i] == search)
      found++;
   }

  // display summation and search results
  printf("\nSum of array elements = %d.",sum);
  if (found == 0)
    printf("\n%d not found in array.",search);
   else
     printf("\n%d was found in array (%d times).",search, found);
#+end_src

Testing:
#+begin_src bash :results output :exports both
  gcc main2.c -o main2
  echo 100 4 -3 100 -1 1 | ./main2
#+end_src

#+RESULTS:
: Which number should I search for? 100
: Enter five integer numbers: 4 -3 100 -1 1
: Sum of array elements = 101.
: 100 was found in array (1 times).

Is this condensed code really better though? Does it save operations?
(No.) It is harder to understand and less modular, since everything
happens in one loop. Would it be better to use functions for different
activities?

