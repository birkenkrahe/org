   TEACHNG DATA SCIENCE WITH LITERATE PROGRAMMING TOOLS
   /(Marcus Birkenkrahe, in preparation, see [[https://docs.google.com/presentation/d/1wA7sb41EjV6GP3oBEFsOiYnoe29WILtLJR2sHSfr6Fs/edit?usp=sharing][presentation]])/
   
   Data science draws on computer science, statistics and domain
   knowledge. It is highly *interdisciplinary*, even more so than other
   related fields like business intelligence or artificial
   intelligence. This interdisciplinarity leads to its alleged
   'sexyness' (Davenport/Patil, 2012 and 2022) - it purports to be
   open to students from a wide variety of backgrounds - like biology
   or psychology, who are interested in widely different
   applications - like genome analysis or marketing predictions (???).

   This versatility comes at a price: the beginner's learning path in
   data science is highly fragmented - it involves different
   programming languages, data visualization techniques, mathematical
   and process modeling, and knowledge of computing infrastructure
   (???). 

   The problem is how to get enough of an overview of all of these
   aspects while learning about data science to solve real-world
   problems, especially for absolute beginners of data science
   (???). For this study, I have employed the (in computer science
   terms) ancient art of literate programming for instruction,
   interaction, and immersion in data science. To facilitate this
   triade of methods, the equally ancient text editor GNU Emacs with
   the ESS ('Emacs Speaks Statistics') and Org-mode plugins were used.

   Data science teaching practice has focused on creating special
   tools like RStudio, a popular IDE for R, packages like the
   "Tidyverse", or online platforms like DataCamp to make learning
   data science (in this case via an R programming track) more
   palatable. Unfortunately, these parallel infrastructures achieve
   little when it comes to preparing students for the real world
   (???). The methodological attitude is well summarized by the "low
   code/no code" trend in IT (???).

   We have used these methods for two consecutive terms across a
   spectrum of courses, with undergraduate students of varying
   seniority, background and interests at a small liberal arts
   college. The results were very encouraging, and contradict the
   current "no code/low code" trend in IT. In stark contrast, the
   study demonstrates that a "high road" approach mixing tools that
   are considered to be difficult but that deliver deep insights into
   both computing infrastructure and data processing, might be at
   least as successful if not more successful. Only followup studies
   can show if this hope will pan out.

   REFERENCES
   ...
