:PROPERTIES:
:ID:       441358b3-c466-4bf8-aef1-7c81ed565586
:END:
#+title: summer24
#+startup: overview hideblocks indent inlineimages
#+options: toc:nil num:nil ^:nil
* [[https://iated.org/iceri/mailingMAY.html][ICERI'24 conference Seville Spain]] - apply for funds
DEADLINE: <2024-08-01 Thu>

- Abstract submission by July 11
- [[https://iated.org/iceri/registration][Registration]] by Sept 6
** Title

Augmenting Non-Expert Assessment of Artifacts using Artificial
Intelligence.

** Authors

- Wesley Beal
- Marcus Birkenkrahe
- Cristian Del Gobbo
- Nikki Yonts

Not sent:
#+begin_quote
It is not appropriate or wise to put yourself as the first author
given your juniority and the role in the project as a hired
intern. Since you're Gen Z, I don't expect you to know this but such
is the real world: it's hierarchies. In 99% of the world's scientific
collaborations you wouldn't even be on the paper. I was only put on
the 1991 paper I mentioned because the lead scientist was a close
friend of my father's. In my other papers I was a PhD student who put
in 18-hour days over several years to be allowed in. These things have
not changed. On a strategic note: if you had followed the (default)
alphabetical order, any of us would have said "look, he did so much
work, and he's starting out, let him be the first!" By assuming
instead of putting yourself last and perhaps negotiating (based on
your position, which is weak), you abandoned this strategically strong
position. The truth is that if I wanted to write a conceptual paper
for a conference like this, and publish it, I'd do it in one evening,
and do the video once in 15 minutes (this is what I did in
spring). For a real experiment, our data are much too weak, and I'm
currently thinking that we should definitely not base our argument on
it. In fact, this may be more valuable as a comment on the meaning and
usefulness of synthetic data in an educational assessment context. In
any case, you're probably Catholic at least by name, and so you need
to accept your penance, which is that I will be the first author, and
you can be the second, Beal the third (the research was his and my
idea), and Yonts the fourth - provided they want to be on the paper at
all.
#+end_quote

Sent:
#+begin_quote
You cannot take for granted that you're in first position on a paper
where you are an intern working with senior researchers. I'll talk to
Drs. Beal and Yonts if they want to be part of the publication or not,
and then I'll let you know.
#+end_quote

** [[https://docs.google.com/document/d/1_rHxkzynJvRychiumHiY4OmcofWdwfZL/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][Abstract]]

#+begin_quote
This study, conducted in the summer of 2024, aims at testing the
ability of generative AI to serve as an efficient non-expert grader
and feedback provider in the context of school-wide curriculum
assessment whereby non-expert educators would be asked to evaluate
student artefacts in a wide spectrum of disciplines at Undergraduate
level.

For the content, we used the conversational interface to OpenAI's
ChatGPT-4o to create diverse student personas and assignments based on
exam questions from two Undergraduate courses on religion and
philosophy[fn:3]. A total of 40 artifacts were created, 20 for each
question. A custom GPT model ("grader-GPT") was developed for grading
and providing feedback according to an existing rubric.

Three educators without specific expertise in the content area graded
and provided feedback on the synthetic artifacts using the same
rubrics as the grader-GPT. Both the educators and the grader-GPT
provided numerical grades and feedback in a specified format to ensure
consistency, and recorded the time required to grade each artifact.

The artifacts, along with their respective grades and feedback from
both the educators and the grader-GPT, were evaluated by a separate
group of educators using a questionnaire designed to assess the
accuracy and usefulness of the grades and the feedback.

Findings include the degree of alignment between the grades given by
the grader-GPT and the educators, a quality comparison, and potential
time savings. The benefits of this approach are weighed against the
potential drawbacks to enable a foundation for a possible integration
of generative AI in the assessment process.

Attendees of this presentation will gain insights into the practical
applications of generative AI in educational settings, specifically in
grading and feedback. They will learn about the methodology used in
creating and evaluating synthetic student artifacts, the effectiveness
of AI compared to human graders, and the potential benefits of AI
augmentation in curriculum assessment. Additionally, attendees will be
equipped with knowledge on implementing AI tools in their own
assessment processes, understanding both the advantages and
limitations, and how to achieve a balanced approach that leverages the
strengths of both AI and human oversight.
#+end_quote

* IN PROGRESS Summer internship & Research project
DEADLINE: <2024-07-31 Wed>

** [[https://lyon.instructure.com/courses/2972][Canvas course]]
** Communication

*** From [[https://mail.google.com/mail/u/0/#starred/FMfcgzGxTNsdVbwJnpdkjfhksVfLfpMS][Wesley (May 16)]]

Following up on the chat that Marcus and I had on Tuesday with some
very brief notes for Nikki. Marcus and I discussed:

- pros-cons of an automated assessment process using AI
- logistics and feasibility of building such a program, including
  research/internship possibilities for a promising student and
  publication opportunities for the team
- how to judge the validity of the results from such a program

We left off, if I recall correctly, with the idea of considering a
pilot program: building out an AI assessment model for just one of the
rubrics of the core curriculum program and seeing how it works. To
take that a step further, I'm going to call a meeting during summer
between the three of us and Sarah White where the three of us can
speak more concretely about it and maybe hash out the frameworks of a
plan for the 24-25 AY. I'll also try to loop in Christian del Gobbo,
who Marcus thinks may be available to work for us in some kind of
internship arrangement.

*** [[https://chat.google.com/dm/-YPpAMAAAAE/sLJTFIEU9R4/sLJTFIEU9R4?cls=10][Suggestions to Cristian (Sun 19 May 2024)]]

1) Write your own brief based on what you have already heard and
   understood. This is something you can directly check with the
   client (who is represented by me for the time being).
2) You can send an email to Peter Staples and ask him if you could
   enroll in his project management course, which is fully online. I
   don't know if you have the prerequisites but the course will be
   useful for any future internship or in fact project and it will
   look good on your resume. Most of the work on the real world is
   organized alongside projects, which have to be managed, and even
   though it seems trivial, it's not trivial as soon as you're no
   longer alone doing the work.
3) start doing research using your own brief. You already know some of
   the basic parameters,and it is very likely that there is work
   already published along these lines (no perhaps not in assessment
   of student papers).
4) in parallel, imagine nobody had ever tried to solve this
   problem. How would you do it. Use PÃ³lyas framework for problem
   solving both for the brief and for the research ([[https://math.libretexts.org/Bookshelves/Applied_Mathematics/Understanding_Elementary_Mathematics_(Harland)/10%3A_Problem_Solving_Logic_Packet/10.01%3A_George_Polya's_Four_Step_Problem_Solving_Process][source]]):
   1. Understand the problem:
      - Do you understand all the words?
      - Can you restate the problem in your own words?
      - Do you know what is given?
      - Do you know what the goal is?
      - Is there enough information?
      - Is there extraneous information?
      - Is this problem similar to another problem you have solved?
   2. Devise a plan - pick one or more strategies (an artful means to
      an end) to solve a problem:
      - Guess and test
      - Use a variable
      - Draw a picture
      - Look for a pattern
      - Make a list
      - Solve a simpler problem
      - Draw a diagram
      - Use direct reasoning
      - Solve an equivalent problem
      - Work backwards
      - Find use cases
      - Solve an equation
      - Look for a formula
      - Do a simulation
      - Use a model
   3. Carry out the plan: use IMRaD and review existing
      literature/sources [more on this later]
   4. Look back and reflect: test your results on humans / more
      literature review [more on this later]

5) start a log of the communications and conversations surrounding the
   problem and the internship. Both to communicate with clients and
   stakeholders (in this case, I am a stakeholder but the real client
   is the dean of assessment, and Professor Beal is another
   stakeholder).
6) building a nano model from scratch is one possible outcome of the
   feasibility study. Using the existing chat GPT API is the immediate
   goal.
7) even though you don't have a lot of experience in creating process
   diagrams, this is one example where creating a graphic for the
   workflows is probably very useful. To begin with, at some point you
   have to make a non-technical presentation and something like that
   is typically based on diagrams rather than text and formulas.
8) for future research build up a set of sources and assess their
   credibility and validity. The sources should not be a loose list
   but they should be sorted and classified, for example into
   scientific papers, conferences, blogs, and so on.
9) there are a lot of little side problems, for example report
   publishing in LaTeX, interfacing with different databases - both to
   pull data and to store data.
10) it is the end of the term and I am quite burned out and need a
    break, which is another reason, why my communication may be a
    little sluggish. Take a little time out to rest and let things
    settle in your brain.

    PS. I do not normally work on Sundays this is a one off!

*** [[https://chat.google.com/dm/-YPpAMAAAAE/75wVV4YtcUU/75wVV4YtcUU?cls=10][Project brief (draft, May 19)]]

The purpose of the project is to find out if AI can be used in this
way, as a third party to check student artifacts. The other professor
who is responsible for assessment, is unconvinced. She has not stated
her position yet. The purpose of the meeting later and summer is to
find out what she thinks. In my view the problem is of a more general
importance, this is just a potential use case, which may ultimately
fail. What that means, success of failure, needs to be ascertained
from the client: the question is how would an AI have to perform in
order to be accepted as a third party. But this is not the initial
problem for you to solve. I'm only telling you because there are a
lot of interesting questions behind it. In any case even starting
this project might result in a publishable paper, which we could
publish together sometime later this year. Results are publishable
even if the research fails, actually, if it fails it is often a lot
more interesting. We'll have to identify an hypothesis or more than
one. Hypothesis testing is one of the items you might have seen in
the DataCamp courses.

*** From Cristian - use of ChatGPT to structure project/paper ([[https://chat.google.com/dm/-YPpAMAAAAE/B43pwAQU7c8/B43pwAQU7c8?cls=10][24 May]])

Today I used ChatGPT to create a first draft of the project structure,
I gave it information and the idea of the structure that I had, and
this is the result. I mentioned that I wanted to do a blind evaluation
(Phase 3 and 4), I think that's a good idea, but I don't know if it's
completely aligned with the project's initial purpose. By the way,
this was not the first answer that ChatGPT gave me, I fine-tuned the
output a little bit. The second attachment concerns the possible
research paper structure (For the publication). Let me know what you
think.

*** To Cristian (25 May)

Hi there, I am not sure you should use ChatGPT for this particular
task - do you have first hand experience in the meta topic? (Project
management) Since I presume you don't, AI is going to give you
something very general, and an expert (i.e. me) will have to put all
the work in to teach you. A better approach is to do original
research, run into issues and make mistakes, try to fix them, ask
humans and, as a last resort, perhaps use AI (but really, as a
learner, don't because using AI is the same as "I don't really care
about this" - and I think you do). Now, of course, the damage is done:
it will be impossible for you to take a step back from what AI has to
say. You cannot undo this. Never, ever, ask AI for a solution unless
you either HATE the topic and just want to get it over with, or (like
in my case, when I use AI) can bring more than half a century of
experiences to bear - and are tired as a 60-year old is entitled to be
(at least at the end of term, at the start of the summer :-)

...but perhaps you can turn this early defeat into a triumph. Likely
not without putting a lot more time in than you'd have if you had
tried to do it all on your own - and now you'll have to share the
credit with the world, which (especially when young) is not to be
underestimated as a psychological burden. Btw, I wrote the project
brief without any AI (because I cared about the result for your sake).

[Shared my thoughts on the use of AI with Pietro because I am curious
what he thinks & he told me that you and he were talking tomorrow or
some time soon]

*** From Cristian ([[https://chat.google.com/dm/-YPpAMAAAAE/jdO9WOzbK0c/jdO9WOzbK0c?cls=10][May 26]])

My bad, I thought that using chatGPT for this kind of "organizational"
task was the right use of it. I wrote a raw structure by myself and
then gave it to ChatGPT to make it a much nicer look. But again, I
made a mistake due to my inexperience. Obviously, I can't erase all
the information the AI gave me, however, is good that I made this
mistake that early and that now I learned the lesson. So, let's take a
step back, as a first step in the project I wanted to create a project
structure to guide me (I don't know if this is right or wrong). Today
I'll write a project structure by myself, it may be similar to the one
created by the AI because essentially I gave him my general ideas to
create it, or let me know if you think I should do something else
before. I'm sorry (for myself first) about that, but I think it was
good that you stopped me and made me think when the project was not
even started. Thanks and let me know (I know that it's Sunday, so if
you want to answer me on Monday, no problem at all)

First of all, I should start by understanding the problem. In the
project brief, you stated that the purpose is to establish the
FEASIBILITY of using GAI. In my opinion, is pretty obvious that it's
possible to use GAI to asses student artifacts, but the question is
how they perform compared to a human expert such as a
professor. Therefore, always in my opinion, the core of the project
should be to make professors blindly rate answers from the GAI and
answers from Professors (Taking as example grades given during the
last semester, if it's possible and doesn't violate privacy) and then
with the collected data, see which entity performed better (GAI or
Professors). I think this is a more general approach and the
Hypothesis to test would be that professors still perform better than
GAI. From these results, we'd be able to state the pros and cons of
using GAI, and then evaluate in practice how this could be implemented
in Canvas for example. This is my first flux of thoughts, let me know
if I'm going out of scope and I didn't understand anything at all. Be
as direct as possible, I care about the content, not the form (In this
context, in other contexts I really care about the form). Thanks

*** To Cristian ([[https://chat.google.com/dm/-YPpAMAAAAE/p-eso4T3tIo/p-eso4T3tIo?cls=10][May 27]])
Pietro thought I'd been too harsh with you - but he's a young man and
they're soft :-) Seriously though, I applaud your initiative, I just
thought it necessary to impart my views - using AI very, very
sparingly in areas where you are already an expert (like bitcoin) is
good, anywhere else it is a dangerous game with your learning
progress. But I may be totally wrong - perhaps it works for you!

Review of [[https://docs.google.com/document/d/1Bh2ff1QGW0hzEu-GHGn3eb4R4xlXRvVa/edit?usp=drive_link&ouid=102963037093118135110&rtpof=true&sd=true][project plan]]: unsurprisingly, it is thorough, and the phase
structure seems good to me - you can totally use this plan to move
ahead. (I thought I'd have to do a lot of work on it but I was wrong.)
Of course I had ChatGPT check its own result, and unsurpringly it
thought "the project plan is comprehensive and well-thought-out,
addressing all necessary aspects for a successful study. Minor
improvements in documentation, risk management, and timeline
specificity could further enhance its effectiveness." Oh well.

Review of [[https://docs.google.com/document/d/13XpHnNOuQYV5xZjXeM3usi5nWY30F5lo/edit?usp=drive_link&ouid=102963037093118135110&rtpof=true&sd=true][paper structure]]: good as well. ChatGPT-4o thinks "Overall,
the proposed structure is comprehensive and well-organized, covering
all essential components of a research paper. Minor improvements in
clarity, documentation, and the inclusion of visual aids could further
enhance its effectiveness."

In principle, I think one can lift a paper straight from the project
documentation (or ask AI to create a draft doing this) - after reading
Mollick's article, you may understand that many past processes
surrounding research will have to be redesigned and rethought (they
already didn't work all that well - I've felt quite cynical about them
for a while - some areas of hard sciences like physics being an
exception.)

One major flaw in the AI's responses: there's no critique or even
reflection of the fact that you've been working with AI, and that AI
may be used - except in a generic way ("limitations due to GAI tools
used"), ignoring the special nature of these tools.

Answers to your specific questions/comments ([[https://chat.google.com/dm/-YPpAMAAAAE/gKqZ_IHSBrY/gKqZ_IHSBrY?cls=10][May 26]]):
#+begin_quote
 First of all, I should start by understanding the problem. In the
  project brief, you stated that the purpose is to establish the
  FEASIBILITY of using GAI. In my opinion, is pretty obvious that it's
  possible to use GAI to asses student artifacts, but the question is
  how they perform compared to a human expert such as a professor.
#+end_quote

This is not obvious to me. "Feasibility" has many facets, and it's not
the same as "possible in principle" but also "at which price," where
"price" could be cost (money, time) for example because the process
could not be automated and therefore someone would have to be hired to
do it, or many people would have to be trained, or one would need a
consultant etc.

So, 'feasibility' relates to the whole software solution. There is,
however, no way for you (or me) to know all these aspects but the more
of them you can discover and at least list, the better for the
project's success.

You are addressing the issue of QUALITY, which is indeed the initial
focus.

#+begin_quote
The core of the project should be to make professors blindly rate
answers from the GAI and answers from Professors (Taking as example
grades given during the last semester, if it's possible and doesn't
violate privacy) and then with the collected data, see which entity
performed better (GAI or Professors).
#+end_quote
Sounds good but also sounds like something others have done (thought
of [[https://arxiv.org/pdf/2306.10052][this paper]] and this [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4802463][2024 followup]]) but that wasn't it - it's about
using AI in the classroom: I'll be working through this paper over the
summer to implement the strategies in class). Data can always be
anonymized.

However, a quicker way to get some results will avoid gathering
primary data from professors (who are famously sluggish during the
summer) and instead create synthetic data (using AI) and simulate
actors.

You other thoughts about proceeding seem good to me.

#+begin_quote
 Be as direct as possible, I care about the content, not the form (In
 this context, in other contexts I really care about the form).
#+end_quote

In all worthwhile endeavours, especially those involving other people,
content and form are pretty indistinguishable...

My hunch, as I'm writing this is that automated grading with AI will
be way less important than conversation based augmentation and
interaction through tutoring. But that's not directly relevant to our
issue, and I may just be influenced by [[https://youtu.be/_nSmkyDNulk?si=mdth82touWHheJF0][this demo]] with Khan - founder
of khanacademy.org and his son.

Anything else you need from me right now? Otherwise I'll have to write
a book. You should upload the GAI generated drafts to the shared
drive, too.

** Sprint review - June 28, 2024 (9-10.30 am)

Zoom recording link: 
https://lyon-edu.zoom.us/rec/share/fI6qqtKcL-EWJWU3ux0zFerN1-g5hamm2t0XrQVE2qDQLwtVX5n18ZegSsYIrc8.B_utxQmDMoJFkC9o
Passcode: @2eAXu4^

Cristian Del Gobbo (CDG) and Marcus Birkenkrahe (MB)
- CDG: Enjoying it: 9/10 - progress is good, though not technical,
  though this is softer
- Always put steps with deadlines and status (traffic light)
- Paper + presentation + video + request for funding
- Would IRB approval always be necessary before using AI for
  assessment?
- Need more information to find out what to do for production
- Author list complete (1. Birkenkrahe, 2. Del
  Gobbo, 3. Beal, 4. Yonts) - Beal, Yonts might add a few
  introductory/concluding sentences on their interest and impact on
  their resp. disciplines.
- Less concerned about statistical evaluation, more about qualitative
  analysis (concepts, relationships and character of artifacts)
- Look at literature on using synthetic artifacts by/with AI
- Serious problem with replicability of AI-driven results
- To which extent do we want to remove objectivity/subjectivity
- Is ChatGPT too tame (humans can be extreme)?
- Next phase: grading and feedback (spring 2 - close by end of July)
- What to grade by when and how? (see shared drive)
- Do we really need two prompts? (first phase yes)
- For the second phase, how many and which professors do we need?
- 80 documents have to be looked at â¦ read artifacts, look at grades,
  look at feedback, answer questions about the feedback = need 10
  people. MB will ask on the Google Chat channel - 1 to 2 hours work
- Give it a week (July 8, Monday deadline)

TO DO:
- CDG to create short message for 2nd phase on what to do exactly
- MB to edit and post on Google faculty chat channel for volunteers
- Deadline Monday, July 8, 2024.

** Call for participation to faculty (28 June)

For the second phase of our interdisciplinary research project on
AI-augmented assessment of student artefacts (with @Wesley Beal and
@Nikki Yonts), we need faculty volunteers who can spend 1-2 hours on:

1. Look at an AI prompt and the rubric of the artifact (2-3 page essay)
2. Read the artifact
3. Look at the grade and the feedback given on the artifact
4. Answer 6 Likert-scale questions in Google Forms

If you're interested, please reach out to me and I get you in touch
with our student researcher. Your benefits: improve your understanding
on how generative AI might affect grading, feedback, and assessment
before (almost) anyone else!

** Project brief (Draft 0.1 - May 23, 2024)
*** Title

"Automated Assessment of Artifacts using AI" (AAA-AI)

*** Purpose

- Establish the feasibility of using generative AI (GAI) to assess
  student artifacts across different study areas.

*** Objectives

Listed in the order in which these were discussed - which order makes
sense for the research workflow needs to be decided. All aspects are
subject to a literature (and source) review.

- List relevant pros and cons of an automated assessment process using
  GAI tools (in collaboration with faculty).

- Establish impact from using different GAIs.

- Identify logistic and infrastructure requirements (in collaboration
  with IT).

- Positive outcome: GAI can be used as an assessor for student artifacts
  with a given rubric.

- Negative outcome: GAI cannot be used as an assessor for student
  artifacts with a given rubric.

*** Deliverables

Feasibility study:
- 3 sprint reviews
- Final presentation
- Final report

*** Limitations

- Team's lack of experience on knowledge
- Rapid GAI tool evolution
- Insufficient evaluation criteria (rubrics weren't created for
  machines - they're often qualitative and can be inexact)

*** Timeline

First phase of the project (feasibility study):
- Sprint 1: May 27-June 24  [sprint review]
- Sprint 2: June 24-July 22 [sprint review]
- Sprint 3: July 22-August 19 [sprint review]

[Attach additional milestones to each month after research start]

*** Evaluation

Metrics to evaluate the sprints:
1) Timely delivery of sprint reviews (2 days before online meeting)
2) Timely delivery of final presentation
3) Timely delivery of final report

*** Team

- Supervisor: Marcus Birkenkrahe
- Project owner: Wesley Beal
- Budget owner: Patrick Lynch
- Student researcher: Cristian Del Gobbo

*** Risks

- Issues with the input (student artifacts)
- Issues with collaborating faculty/services (IT)
- Issues with the team members
- Issues with the GAI tools

*** Approval

- [X] Hiring (Patrick Lynch/Marcus Birkenkrahe)
- [ ] Results month 1 [TBC]
- [ ] Results month 2 [TBC]
- [ ] Results month 3 [TBC]
- [ ] Final presentation [TBC]
** [[https://docs.google.com/presentation/d/1ktIAkA1Q3vWqdq_yGKfo-YM0__dmXjsT/edit?usp=drive_link&ouid=102963037093118135110&rtpof=true&sd=true][Meeting Wesley, Nikki, Cristian (4 June 2024)]]

** Experiment: grading

* Human and AI graders (prompt A)

1. Plot the grade curves for the three human graders
   (histogram/median)
2. Plot the grade curve for Claude/Grader-GPT over it
3. Compare averages in a plot

** Data   
- Data: three human graders for prompt A (arrays)
  #+begin_src python :python python3 :session *Python* :results none
    import numpy as np
    # human graders 1-3 prompt A
    h1_a = np.array([24,22,25,22,24,24,25])
    h2_a = np.array([17,19,19,18,18,21,17])
    h3_a = np.array([12,22,10,11,11,9])
  #+end_src
** Line plot
- Plot each of these as a line plot:
  #+begin_src python :file img/h_a.png :results graphics file output :python python3 :session *Python*
    import matplotlib.pyplot as plt # import library
    plt.clf() # clear graphics
    fig, ax = plt.subplots(3,1, sharex=True) # set up 3 x 2 plot panel
    ## first grader
    ax[0].plot(h1_a,marker="o")
    ax[1].plot(h2_a,marker="o")
    ax[2].plot(h3_a,marker="o")
    plt.savefig("img/h_a.png") # save plot
  #+end_src

  #+RESULTS:
  [[file:img/h_a.png]]

** Histogram  
- Histograms:
  #+begin_src python :file img/h_a_hist.png :results graphics file output :python python3 :session *Python*
    import matplotlib.pyplot as plt # import library
    plt.clf() # clear graphics
    fig, ax = plt.subplots(3,1,sharex=True) # set up 3 x 2 plot panel
    ## human graders - histogram and median
    ax[0].hist(h1_a,bins="auto",edgecolor="w")
    ax[0].axvline(np.median(h1_a),color="r",linestyle="--",linewidth=2)
    ax[1].hist(h2_a,bins="auto",edgecolor="w")
    ax[1].axvline(np.median(h2_a),color="r",linestyle="--",linewidth=2)
    ax[2].hist(h3_a,bins="auto",edgecolor="w")
    ax[2].axvline(np.median(h3_a),color="r",linestyle="--",linewidth=2)
    ## customize plots
    # title and labels
    ax[0].set_title("Grades - First prompt essays - histograms")
    ax[2].set_xlabel("Points")
    ax[0].set_ylabel("Frequency")
    ax[1].set_ylabel("Frequency")
    ax[2].set_ylabel("Frequency")
    # grid lines
    ax[0].grid()
    ax[1].grid()
    ax[2].grid()
    plt.tight_layout()
    plt.savefig("img/h_a_hist.png") # save plot
  #+end_src

  #+RESULTS:
  [[file:img/h_a_hist.png]]

** Box plot  
- Boxplots:
  #+begin_src python :file img/h_a_box.png :results graphics file output :python python3 :session *Python*
    import matplotlib.pyplot as plt # import library
    plt.clf() # clear graphics
    fig, ax = plt.subplots(3,1,sharex=True) # set up 3 x 2 plot panel
    boxprops = dict(linestyle='-',linewidth=1.5) ## boxprops
        ## human graders - box plots
    ax[0].boxplot(h1_a,vert=False,boxprops=boxprops)
    ax[1].boxplot(h2_a,vert=False,boxprops=boxprops)
    ax[2].boxplot(h3_a,vert=False,boxprops=boxprops)
    ## customize plots
    # title and labels
    ax[0].set_title("Grades - First prompt essays - box plots")
    ax[2].set_xlabel("Points")
        # grid lines
    ax[0].grid(True)
    ax[1].grid(True)
    ax[2].grid(True)
    plt.savefig("img/h_a_box.png") # save plot
  #+end_src

  #+RESULTS:
  [[file:img/h_a_box.png]]

- Box plots might look better next to, instead of on top of one
  another:
  #+begin_src python :file img/h_a_box2.png :results graphics file output :python python3 :session *Python*
    import matplotlib.pyplot as plt # import library
    plt.clf() # clear graphics
    fig, ax = plt.subplots(1,3,sharey=True) # set up 3 x 2 plot panel
    boxprops = dict(linestyle='-',linewidth=1.5) ## boxprops
        ## human graders - box plots
    ax[0].boxplot(h1_a,boxprops=boxprops)
    ax[1].boxplot(h2_a,boxprops=boxprops)
    ax[2].boxplot(h3_a,boxprops=boxprops)
    ## customize plots
    # title and labels
    ax[1].set_title("Grades - First prompt essays - box plots")
    ax[0].set_ylabel("Points")
    # grid lines
    ax[0].grid(True)
    ax[1].grid(True)
    ax[2].grid(True)
    plt.tight_layout()
    plt.savefig("img/h_a_box2.png") # save plot
  #+end_src

  #+RESULTS:
  [[file:img/h_a_box2.png]]

** Boxplot with AI grader median

- Using the data from the same Artifact IDs as the human graders to
  compare the medians in the histogram.

- Get the data:
  #+begin_src python :python python3 :session *Python* :results none
    import numpy as np
    # human graders 1-3 prompt A
    claude_1_a = np.array([25,24,25,21,25,25,25])
    claude_2_a = np.array([21,25,25,25,25,23,22])
    claude_3_a = np.array([24,24,23,23,25,24])
    grader_1_a = np.array([25,24,25,24,25,25,25])
    grader_2_a = np.array([25,25,25,25,24,25,25])
    grader_3_a = np.array([25,25,25,25,25,25])
  #+end_src

- Plot the data. Needs some legend information - plot's getting too
  busy.
  #+begin_src python :file img/h_ai_a_hist.png :results graphics file output :python python3 :session *Python*
    import matplotlib.pyplot as plt # import library
    plt.clf() # clear graphics
    fig, ax = plt.subplots(3,1,sharex=True) # set up 3 x 2 plot panel
    ## human graders - histogram
    ax[0].hist(h1_a,bins="auto",edgecolor="w")
    ax[1].hist(h2_a,bins="auto",edgecolor="w")
    ax[2].hist(h3_a,bins="auto",edgecolor="w")
    # medians - human graders
    ax[0].axvline(np.median(h1_a),color="r",linestyle="--",linewidth=2)
    ax[1].axvline(np.median(h2_a),color="r",linestyle="--",linewidth=2)
    ax[2].axvline(np.median(h3_a),color="r",linestyle="--",linewidth=2)
    # medians - AI graders
    ax[0].axvline(np.median(claude_1_a),color="orange",linestyle="-",
                  linewidth=2)
    ax[0].axvline(np.median(grader_1_a),color="black",linestyle=":",
                  linewidth=2)
    ax[1].axvline(np.median(claude_2_a),color="orange",linestyle="-",
                  linewidth=2)
    ax[1].axvline(np.median(grader_2_a),color="black",linestyle=":",
                  linewidth=2)
    ax[2].axvline(np.median(claude_3_a),color="orange",linestyle="-",
                  linewidth=2)
    ax[2].axvline(np.median(grader_3_a),color="black",linestyle=":",
                  linewidth=2)
    ## customize plots
    # title and labels
    ax[0].set_title("Grades - First prompt essays - histograms")
    ax[2].set_xlabel("Points")
    ax[0].set_ylabel("Frequency")
    ax[1].set_ylabel("Frequency")
    ax[2].set_ylabel("Frequency")
    # grid lines
    ax[0].grid()
    ax[1].grid()
    ax[2].grid()
    plt.tight_layout()
    plt.savefig("img/h_ai_a_hist.png") # save plot
  #+end_src

  #+RESULTS:
  [[file:img/h_ai_a_hist.png]]

*** First prompt

1) reflect on religion in the context of your (philosophy of) life
2) discuss how 2 different religions (one not Abrahamic) have
   influenced your thoughts about your religious experience/philosophy

**** [[https://docs.google.com/document/d/16aL6GKr-lioKXY85P9AF20H3og4TIgAY/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][18th essay 1st prompt]]

- Grade: 1 + 2 + 4 + 2 + 2 = 11
- Feedback: Prompt specifically asked for two religions but Stoicism
  is most definitely not a religion, which implies belief in a
  supernatural reality. Stoicism is an agnostic system of philosophy,
  and one might even argue that it is anti-theistic and, by
  implication, anti-Christian. The author has not understood the
  concept of religion. The reflection otherwise is very shallow and
  does not appear deeply felt.
- Time: 15 min
  
**** [[https://docs.google.com/document/d/1zAY66tXFDZn_TJUKw6YGXyoqWLaNprgf/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][15th essay 1st prompt]]

- Grade: 3 + 2 + 3 + 2 + 2 = 12
- Feedback: The concept of "agape" is interpreted very one-sided,
  because it includes also our love for God, not just God's
  unconditional love. Transcendentalism is not a religion though it is
  closely related to Unitarianism. The interpretation of perspectives
  is very naive (for example, Christianity flows from the idea of
  original sin, not solely from God's love, which is not selfless
  either). Finally, "Christianity" is not a monolithic viewpoint -
  there are many shades of Christianity. The reflection is shallow,
  and does not consider any shades of gray.
- Time: 15 min

**** [[https://docs.google.com/document/d/1NAz5WPTyxZoP6Kay8T7cIfMmu9GP-N8m/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][19th essay 1st prompt]]

- Grade: 11 (1 + 2 + 3 + 3 + 2)
- Feedback: "Deep Ecology" is correctly identified as a philosophical
  perspective (though it is mostly described as a political point of
  view), and not as a religion. It complements Buddhism, which is a
  religion. The essay fails the main goal of contrasting
  religions. Otherwise, it is written in a very engaging way. What is
  personally missing for me is any mention of alternative viewpoints,
  which might have enriched the reflection (like a mirror, the
  reflection should contain beauty and ugliness if both are visible),
  and "activism" is usually in response to something missing necessary
  action.
 - Time: 15 min

**** [[https://docs.google.com/document/d/1qCGoiUVnSKGL6h4LAfcK2A2sNCuGA4qb/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][17th essay 1st prompt]]

- Grade: 10 (1 + 2 + 3 + 2 + 2)
- Feedback: Liberation Theology (LT) is a movement within Catholicism,
  so the rule of picking only one Abrahamic Faith was
  violated. Alternative viewpoints to the controversial LT (at least
  within the Catholic Church) are not discussed. Discussion is clear,
  but detail is missing - no real examples are provided. Little
  insight or thought especially given the origin of LT. What motivated
  the author to pursue "social justice" remains unclear.
- Time: 15 min

**** [[https://docs.google.com/document/d/1g4eW1_YS2O4v_6eMh2c7UtxFU0FgJMec/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][16th essay 1st prompt]]

- Grade: 22 (= 4 + 3 + 3 + 4 + 3)
- Feedback: Buddhism and Taoism are very closely related, and one
  might argue that they do not provide a profoundly different
  religious perspective - but I don't really know enough about
  either. The detail (esp. regarding physics) is pretty detailed and
  the reflection provides plenty of detail. What I'm missing is
  alternative viewpoints and/or sources, which are easy to come by
  (especially in physics where many main contributors were religious).
- Time: 15 min

**** [[https://docs.google.com/document/d/18cghFpkTm2sbjlB0IDtoTMMAmPF-alcj/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][20th essay 1st prompt]]

- Grade: 9 (= 1 + 2 + 3 + 2 + 1)
- Feedback: Existentialism is not considered a religion but a
  philosophical movement (as the author himself writes). There are
  existentialist philosophers (like Kierkegaard) that are religious,
  and others (like Camus or Sartre) that are atheists or agnostics. I
  don't think Christianity (or existentialism) are adequately
  portrayed but rather there's some "cherry-picking" going on: the
  author takes from either what he believes helped him. The reflection
  misses out on all modern aspects of journalism related to both truth
  and the changed human existence in a digital world. Very little
  actual detail is given.
- Time: 15 min

* DONE TRIO workshop: Data science for everyone - +Visualizing the solar eclipse+
#+attr_html: :width 400px:
[[./img/ds_4_everyone.png]]

Thursday - June 13, 2:15-3:00 and 3:15-4:00 pm

[[id:60756d90-7171-4bdb-b990-d498213b4afe][workshop notebook]]

- Change visualizations to Python:
  1. [[https://colab.research.google.com/drive/1Z2mLFnDsvhxcyyU_QeYVJPBt0AUXE0DN?usp=sharing][Google Colab workbook]]
  2. [[https://www.datacamp.com/datalab/w/5e1222f0-7845-41c1-99e6-451bcf0c9a5c/edit][DataLab workbook]]
  3. [[https://chatgpt.com/share/633f7894-effa-4efc-9862-6ddeaea19979][ChatGPT]] (via Mollick's Data Analysis Buddy)
     
- [[https://x.com/PhysInHistory/status/1777201899206213639][10 little known facts]]

** Workshop Objectives and Goals
1) *Objective 1:* Introduce participants to the fundamentals of data
   science with a specific focus on data visualization techniques.
   + /Achievement Strategy:/ Through guided exercises in Google
     Colaboratory, participants will learn how to manipulate and
     visualize solar eclipse data.
2) *Objective 2:* Demonstrate the power and accessibility of data
   science to a broad audience, regardless of their prior technical
   background.
   + /Achievement Strategy:/ Utilizing the intuitive interface of
     Google Colab and engaging with real-world datasets to ensure
     concepts are easily understood and applied.
3) *Objective 3:* Foster an appreciation for the practical
   applications of data science in understanding natural phenomena.
   + /Achievement Strategy:/ By analyzing and visualizing solar
     eclipse data, participants will directly see the impact of data
     science on interpreting the natural world.

** Workshop Outline
1) *Introduction [15 min]*
   + Welcome and overview of the workshop.
   + Brief introduction to Google Colaboratory and its significance
     in data science.
2) *Fundamentals of Data Science [15 min]*
   + Basics of data manipulation and analysis.
   + Introduction to Python for data science.
3) *Interactive Activity: Exploring Solar Eclipse Data [40 min]*
   + Loading the solar eclipse dataset into Google Colab.
   + Hands-on exercises:
     - Cleaning and preparing data.
     - Visualizing the data: Creating plots to show the path of the
       eclipse, frequency of eclipses over years, etc.
   + Encourage experimentation with different types of visualizations.
4) *Discussion and Q&A [10 min]*
   + Discuss the findings from the data.
   + Answer any questions related to the workshop content or data
     science in general.
5) *Wrap-Up and Feedback [10 min]*
   + Recap of the key takeaways.
   + Collect feedback for improving future workshops.

** Physical Reminder of the Workshop
*Customized Workshop Pamphlet*
+ A comprehensive pamphlet that includes:
  - Summary of key data science concepts covered.
  - Step-by-step guide for the solar eclipse data visualization
    project.
  - Tips and best practices for using Google Colaboratory.
  - List of additional resources for further learning in data
    science and Python programming.
+ This pamphlet will serve not only as a physical reminder of the
  workshop's purpose but also as a resource for participants to
  revisit and apply what they have learned to future projects.

** Conclusion
This workshop is designed to demystify data science and make it
accessible to everyone, illustrating its practical application
through the engaging subject of solar eclipses. By providing a
hands-on learning experience and a take-home pamphlet, participants
will leave with both the knowledge and a tangible reminder to
continue exploring the field of data science.

I am reaching out to express my interest in the Summer Research Grant
for Non-tenured, Tenure-track Faculty for the summer of 2024. This
application outlines my proposed research project aimed at pioneering
advancements in literate programming within computer and data science
education. I completed my third-year review in December 2022.

** Workshop Objectives and Goals
1) *Objective 1:* Introduce participants to the fundamentals of data
   science with a specific focus on data visualization techniques.
   + /Achievement Strategy:/ Through guided exercises in Google
     Colaboratory, participants will learn how to manipulate and
     visualize solar eclipse data.
2) *Objective 2:* Demonstrate the power and accessibility of data
   science to a broad audience, regardless of their prior technical
   background.
   + /Achievement Strategy:/ Utilizing the intuitive interface of
     Google Colab and engaging with real-world datasets to ensure
     concepts are easily understood and applied.
3) *Objective 3:* Foster an appreciation for the practical
   applications of data science in understanding natural phenomena.
   + /Achievement Strategy:/ By analyzing and visualizing solar
     eclipse data, participants will directly see the impact of data
     science on interpreting the natural world.

** Workshop Outline
1) *Introduction [15 min]*
   + Welcome and overview of the workshop.
   + Brief introduction to Google Colaboratory and its significance
     in data science.
2) *Fundamentals of Data Science [15 min]*
   + Basics of data manipulation and analysis.
   + Introduction to Python for data science.
3) *Interactive Activity: Exploring Solar Eclipse Data [40 min]*
   + Loading the solar eclipse dataset into Google Colab.
   + Hands-on exercises:
     - Cleaning and preparing data.
     - Visualizing the data: Creating plots to show the path of the
       eclipse, frequency of eclipses over years, etc.
   + Encourage experimentation with different types of visualizations.
4) *Discussion and Q&A [10 min]*
   + Discuss the findings from the data.
   + Answer any questions related to the workshop content or data
     science in general.
5) *Wrap-Up and Feedback [10 min]*
   + Recap of the key takeaways.
   + Collect feedback for improving future workshops.

** Physical Reminder of the Workshop
*Customized Workshop Pamphlet*
+ A comprehensive pamphlet that includes:
  - Summary of key data science concepts covered.
  - Step-by-step guide for the solar eclipse data visualization
    project.
  - Tips and best practices for using Google Colaboratory.
  - List of additional resources for further learning in data
    science and Python programming.
+ This pamphlet will serve not only as a physical reminder of the
  workshop's purpose but also as a resource for participants to
  revisit and apply what they have learned to future projects.

** Conclusion
This workshop is designed to demystify data science and make it
accessible to everyone, illustrating its practical application
through the engaging subject of solar eclipses. By providing a
hands-on learning experience and a take-home pamphlet, participants
will leave with both the knowledge and a tangible reminder to
continue exploring the field of data science.

* TRIO workshop: game programming in Python +and Scratch+
#+attr_html: :width 400px: 

- Fun: Game graphics 1977-2024 ([[https://x.com/alsamahi/status/1798219945232224354][video]])

- [[id:e7544729-0ba3-4298-9efd-0ae3fa4de4d6][Course notebook]]

** TRIO Workshop - [Towards] Game Programming with Python
*** *Session 1 (45 Minutes)*

1. *Introduction to Python and the Interactive Shell (10 Minutes)*
   - *Objective*: Basic Python operations.
   - *Activity*: Practice arithmetic operations and variable assignments
     in Python shell.

2. *Writing Simple Programs (35 Minutes)*
   - *Objective*: Writing and running scripts.
   - *Activity*: Create and run a âHello Worldâ program, and a script
     for user input/output.

*** *Session 2 (45 Minutes)*

1. *Review and Q&A (5-10 Minutes)*
   - *Objective*: Recap and clarify doubts.

2. *Introduction to Guess the Number Game (35-40 Minutes)*
   - *Objective*: Write and understand a simple game.
   - *Activity*: Write the "Guess the Number" game, including loops and
     conditionals.

*Considerations*:
- Ensure all students have Python setup (using Google Colaboratory)
- Support beginners with additional help as needed.
- Engage students with live coding and immediate feedback.
- Be prepared to extend activities into homework if needed.

** Sources

- Python Turtle ([[https://realpython.com/lessons/getting-started-with-turtle/][videos]] / [[https://realpython.com/beginners-guide-python-turtle/][tutorial]]) - [[id:8df25c02-2a5d-4331-a9d0-373c88416068][Course notebook]]

- [[id:48b9d659-3eab-4db7-901b-fed8a34fd663][Course notebook]]: Conway Game of Life
- [[https://studio.code.org/s/csp3-virtual/lessons/1/levels/1][Code.org: Introduction to Game Lab (visual and Turtle)]] (JavaScript)
- [[https://realpython.com/courses/conway-game-of-life-python/][Conway's Game of Life with Python]]
- [[https://youtu.be/z3k1Rt7ncco?si=j-vwyTjIo6KmWZ6I][Conway's Game of Life with Scratch]]
- [[https://colab.research.google.com/github/Sithlord-dev/Game_of_life/blob/main/The%20Game%20of%20life.ipynb][Google Colab]] - [[https://colab.research.google.com/drive/1o8GWypVkp6kb039eJM3WcLrpYldFGyqb?usp=sharing][GDrive]]

** Details

Wednesday, June 12, 2:15-3:00 pm and 3:15-4:00 pm - Lyon 104

** Syllabus

*** Workshop Description

The "Game Programming with Python" workshop aims to introduce
students to basic concepts in programming through the engaging
medium of game development. Using Python and Scratch, participants
will learn how programming can be applied to create interactive
experiences, specifically through programming Conway's Game of
Life. This workshop is designed for beginners with no prior
programming experience as well as those who have some basic
understanding of coding.

*** Workshop Objectives and Goals

- *Introduce Basic Programming Concepts*: Through Python and Scratch,
  students will learn fundamental programming structures such as
  loops, conditionals, and variables.
- *Develop Problem-Solving Skills*: Participants will tackle programming
  challenges involved in creating Conway's Game of Life, enhancing
  their logic and problem-solving capabilities.
- *Create Conway's Game of Life*: By the end of the workshop, students
  will have programmed their own version of Conway's Game of Life in
  both Scratch and Python.
- *Inspire Further Learning*: Encourage students to explore more
  advanced game development concepts and programming languages.

  The goals will be achieved through a mix of instructional content,
  live coding demonstrations, and hands-on activities.

*** Workshop Outline

- *Session 1 (45 minutes)*
  1. *Introduction to Game Programming*: Overview of game development
     and the role of programming.
  2. *Getting Started with Scratch*: Creating Conway's Game of Life in
     Scratch to understand the basics of cellular automata.
  3. *Hands-On Activity*: Students will modify their Scratch projects
     to experiment with different rules and initial configurations.

- *Session 2 (45 minutes)*
  1. *Introduction to Python*: Transitioning from Scratch to Python,
     explaining the similarities and differences.
  2. *Building Conway's Game of Life in Python*: Guided tutorial on
     developing Conway's Game of Life using Python.
  3. *Hands-On Activity*: Students will add features or personal
     touches to their Python version of the game, with the goal of
     creating a unique and functional simulation by the end of the
     session.

*** Deliverables for Students

Students will receive a *Workshop Pamphlet* that includes:
- Summaries of key programming concepts covered in the workshop.
- Step-by-step instructions for recreating Conway's Game of Life at
  home.
- Additional resources for learning more about Python and game
  development.
- Contact information for further guidance or future workshops.

  In addition, students will leave with digital copies of their
  Scratch and Python projects for Conway's Game of Life, which they
  can continue to develop and enhance at home.

*** Conclusion

This workshop is designed to make learning to code accessible and
enjoyable, using the classic Conway's Game of Life to teach valuable
programming skills. By the end of the workshop, students will not
only have created their own simulation but also gained the
confidence to explore more complex programming topics.
  
** DONE Podcast: Spreading the gospel of Python (Stackoverflow)

- [[https://stackoverflow.blog/2024/05/14/spreading-the-gospel-of-python/][Interview with Al Sweigart]] (May 14, 2024)

** Script

*** What is a programming language? ([[https://resources.github.com/software-development/what-is-a-programming-language/][GitHub]])

A programming language is a formal language to express instructions
for a computer. It is more like mathematical expressions than like
spoken languages.

*** How many languages are there?

- Spoken ("natural") languages: more than 7,000 - hard to say because
  we don't really know what language is ("Language is self-expression"
  defers the definition to "self"), where it comes from, or when a
  dialect is a new language (Source: [[https://www.worldatlas.com/society/how-many-languages-are-there-in-the-world.html][WorldAtlas]]).
  
- Programming ("formal") languages: there are more than 8,000
  historical programming languages but currently used about 700
  (Source: [[https://resources.github.com/software-development/what-is-a-programming-language/][GitHub]]).

*** What is a programming environment?

A programming environment is software that allows you to write and run
programs on a computer so that you get the same results when you apply
the same conditions.

The fundamental object of such an environment is the file - on today's
computers, everything is organized as a file. Therefore it's important
to understand how files are created, changed, moved around, and found.

At Lyon, in my computer and data science classes, I force students to
use Emacs, the "hacker's editor", to write and run code - this is
highly unusual since Emacs is supposed to have too steep a learning
curve for beginners (I don't think it does or if it does, it's worth
it - cp. Birkenkrahe, 2023).

*** What's the difference between Scratch and Python?

- What does it look like?
  #+attr_html: :width 400px:
  [[./img/scratch.png]]

  #+attr_html: :width 400px:
  [[./img/python.png]]

- Answer:  
  #+begin_quote
  *Scratch* is a high-level visual, block-based, script language:
  Scratch commands are organized as scripts which need to be run, and
  you don't have to know the precise form of commands because they're
  hardcoded as blocks. The programming is done in a script area, and
  the output is shown on a stage using "sprite" objects (like the
  cat). 

  *Python* is a high-level, interpreted/compiled programming language:
  you can run it in its interpreted form from a console, or you can
  run Python scripts (like Scratch scripts). It is used for teaching
  how to program but it is also used in professional settings. It is
  an important language for data science and machine learning.

  Both Scratch and Python are dynamically typed: the data type of
  variables is not declared or checked at compile time (when the
  executable program is created). It assigns values to variables and
  binds them to memory containers that can store any type of data.

  Both languages are considered easy to learn for beginners.
  #+end_quote

- [[https://www.tiobe.com/tiobe-index/][TIOBE Index June 2024]]:
  #+attr_html: :width 400px:
  [[./img/tiobe_june_2024.png]]

** References

- Birkenkrahe (2023). Teaching Data Science with Literate Programming
  Tools. [[https://www.mdpi.com/2673-6470/3/3/15][URL]]
- GitHub (2024). What is a programming language? [[https://resources.github.com/software-development/what-is-a-programming-language/][URL]]
- WorldAtlas (2024). How Many Languages Are There In The World? [[https://www.worldatlas.com/society/how-many-languages-are-there-in-the-world.html][URL]]


** Tests

[[https://quizizz.com/admin/quiz/6661f06fc8188d75936738cd/python-basics-quiz?fromSearch=true&source=][Python Basics]]

#+begin_example
Question,Correct Answer,Option 1,Option 2,Option 3,Option 4
Which of the following is a correct way to start the Python interactive shell?,python3,start python,python3,open python,begin python
What is the output of the following expression: 2 + 3 * 4?,14,14,20,24,30
How do you print the string "Hello, World!" in Python?,print("Hello, World!"),echo("Hello, World!"),print("Hello, World!"),output("Hello, World!"),show("Hello, World!")
What is a variable in Python?,A place to store a value that can change.,A place to store text only.,A place to store a value that can change.,A function that cannot change.,A permanent data store.
Which operator is used for division in Python?,/,\,/,//,|
What does the expression 5 + 2 * 3 evaluate to?,11,21,16,11,10
How can you store the result of 2 + 3 in a variable named result?,result = 2 + 3,result = 2 + 3,2 + 3 = result,set result to 2 + 3,result => 2 + 3
Which of the following will create an error?,5 = x,4 + 5,print("Hello"),x = 10,5 = x
What does the input() function do in Python?,Takes user input as a string.,Outputs a string.,Takes user input as a string.,Stores a value in a variable.,Initializes the Python interpreter.
Which of these commands will display the current value of a variable x?,print(x),show x,display(x),print(x),echo x
#+end_example

[[https://quizizz.com/admin/quiz/6661f2076cc84139c3c80b74/python-programming-quiz?fromSearch=true&source=][Python Programming]]

#+begin_example
Question,Correct Answer,Option 1,Option 2,Option 3,Option 4
How do you write a comment in Python?,# This is a comment,# This is a comment,// This is a comment,/* This is a comment */,! This is a comment
What is the correct way to prompt the user to enter their name and store it in a variable name?,name = input("Enter your name: "),name = input("Enter your name: "),name = get_input("Enter your name: "),name = prompt("Enter your name: "),name = ask("Enter your name: ")
Which function generates a random integer between 1 and 20?,random.randint(1, 20),random.randint(1, 20),randint(1, 20),random.number(1, 20),rand.num(1, 20)
What will the following code print? print("The result is", 2 * 3),The result is 6,The result is2 * 3,The result is 23,The result is 6,The result is (2 * 3)
In the "Guess the Number" game, what does the following code do? if guess < number: print("Your guess is too low."),It compares guess to number and prints if guess is lower.,It compares guess to number and prints if guess is higher.,It compares guess to number and prints if guess is lower.,It prints a random number.,It always prints "Your guess is too low."
How do you convert the userâs input guess to an integer?,int(guess),int(guess),str(guess),float(guess),input(guess)
What does the break statement do in a loop?,It stops the loop immediately.,It starts a new iteration.,It stops the loop immediately.,It pauses the loop.,It restarts the loop.
Which line correctly checks if the guessed number is correct?,if guess == number:,if guess == number:,if guess = number:,if guess equal number:,if guess === number:
How do you initialize a variable count to 0?,count = 0,count == 0,count = 0,0 = count,init count to 0
Which of the following is a flow control statement used to skip the rest of the current iteration of a loop and move to the next iteration?,continue,skip,next,continue,pass
#+end_example

* TRIO workshop: 45 programming languages in 45 minutes
#+attr_html: :width 400px:
[[./img/pgm_languages_poster.png]]

Monday, June 10 - 3:15-4:00 pm

[[id:4e81265d-efb8-4786-89f6-a98b3ccf81b8][course notebook]]

** Workshop Objectives/Goals

- To provide a rapid introduction to 45 different programming
  languages, highlighting unique features and use cases.
- To inspire participants to explore new programming languages and
  paradigms.
- To demonstrate the power and flexibility of Emacs and Org-mode for
  learning and documenting coding practices.
- **Achievement Method**: Through a fast-paced, interactive presentation
  and hands-on activities using Emacs and Org-mode, participants will
  get a snapshot of each language and create a personal digital
  notebook as a takeaway.

** Introduction (5 minutes)

    - Welcome and overview of the workshop goals.
    - Brief explanation of Emacs and Org-mode for newcomers.
    - Part 1: The Speed Run (30 minutes)
      - Rapid presentation of 45 programming languages (approximately
        40 seconds per language).
        + Each language will be introduced with its name, a key
          feature, and a typical use case.
        + A snippet of code in each language will be shown using Emacs
          with relevant modes for syntax highlighting.
    - Part 2: Hands-on Activity (10 minutes)
      - Participants will select one language introduced during the
        speed run to explore further.
      - Using Emacs and Org-mode, each participant will write a simple
        "Hello, World!" program in their chosen language.
    - This activity will demonstrate how to use Emacs as a versatile
      editor for multiple programming languages.
    - Q&A and Wrap-Up (5 minutes)
      - Open floor for questions.
      - Discussion on how participants can continue exploring these
        languages using resources provided.

** Interactive Component

- **Hands-on Activity Description**: The "Hello, World!" programming
  task allows participants to directly engage with a new language of
  their choice. This activity not only reinforces learning but also
  demonstrates the practical use of Emacs and Org-mode for coding
  and documentation.

** Workshop Takeaway
- **Physical Reminder**: A customized Emacs Org-mode digital notebook template.
  + This template will include sections for each of the 45 languages covered, with space for notes, code snippets, and personal reflections.
  + Instructions on how to use Org-mode for programming, learning, and documentation.
  + Links to online resources for further exploration of each language.
- **Purpose**: This digital notebook serves as both a souvenir and a practical tool for continued learning and exploration post-workshop.

** Additional Notes
- Ensure that all participants have access to a computer with Emacs
  and the necessary modes/plugins installed before the workshop.
- Consider providing a pre-workshop setup guide for participants new
  to Emacs and Org-mode.
- Tailor the selection of programming languages to include a mix of
  popular, emerging, and specialized languages to cater to a wide
  range of interests and backgrounds.


** Test

[[https://quizizz.com/admin/quiz/6666f7adadd5079d418d8d14][Quizziz link]]

Questions:
#+begin_example
Question,Option 1,Option 2,Option 3,Option 4,Answer
What is a programming language?,"A set of spoken instructions for computers","A formal language to express instructions for a computer","A graphical interface for programming","A software development platform","A formal language to express instructions for a computer"
What happens if you don't follow the syntax rules of a programming language?,"The program runs with warnings","The program produces a compilation error","The program ignores the errors","The program runs with default values","The program produces a compilation error"
Which of the following is true about Emacs?,"It is a closed-source editor","It is not customizable","It can be changed by anyone who knows Emacs Lisp","It is primarily used for web development","It can be changed by anyone who knows Emacs Lisp"
What is Org-mode?,"A programming language","A structured plain text file format and an Emacs package","A type of compiler","A machine code editor","A structured plain text file format and an Emacs package"
What is the primary purpose of a programming environment?,"To play games","To write and run programs on a computer","To browse the internet","To edit videos","To write and run programs on a computer"
How many programming languages are known to be currently used?,"About 100","About 500","About 700","About 1000","About 700"
What is 'natural language processing' (NLP)?,"A method to process natural language using programming","A technique for debugging programs","A tool for compiling code","A system for managing databases","A method to process natural language using programming"
Why is it important to know more than one programming language?,"To understand only one type of problem","To work with multiple applications and specific purposes","To make programming harder","To limit job opportunities","To work with multiple applications and specific purposes"
What is Literate Programming?,"Writing code that only machines can read","Writing code that is human-readable and understandable","A tool for editing images","A type of game development","Writing code that is human-readable and understandable"
Which editor is known as the "hacker's editor"?,"VSCode","Sublime Text","Emacs","Notepad++","Emacs"
#+end_example

* BridgeStan - C++ bridge to Stan (Edward A. Roualdes)

- [[https://colab.research.google.com/drive/1dceEoGGx6WFyIioir22aVK3EP_9SMIjk?usp=sharing][BridgeStan-OU-demo (Colab)]]
- [[https://roualdes.us/presentations/oudsw_bridgestan][Presentation (24 May 2024) "BridgeStan; for research"]]
- [[https://mc-stan.org/][Stan platform]]

* TRIO workshop: data science for everyone - visualizing Mars data

- [[https://www.kaggle.com/datasets/deepcontractor/mars-rover-environmental-monitoring-station][Mars rover environmental data (from Curiosity)]]

* TRIO workshop Files: [[~/GistHub/admin/summer24]]
* Intermediate algebra (MTH 001)

[[https://catalog.lyon.edu/mathematics/mth-001][2023/24 catalog:]]
#+begin_quote
This course prepares students for College Algebra. Coverage will
include basic algebraic operations, polynomials, rational expressions,
exponents and radicals, linear equations, quadratic equations, radical
equations, absolute value equations, solving inequalities, functions,
and graphing.
#+end_quote

- [[https://www.khanacademy.org/math/algebra-basics][Khan Academy Algebra Basics]]
- [[https://www.freecodecamp.org/news/learn-algebra-to-improve-your-programming-skills/][freeCodeCamp Algebra in 7 hours]]
- [[https://www.freecodecamp.org/learn/college-algebra-with-python/][freeCodeCamp College Algebra with Python]]
- [[https://archive.org/details/intermediatealge0000ange/mode/2up][Angel Rund Student Solutinos Manual]]
- [[https://open.umn.edu/opentextbooks/textbooks/134][OpenTextbook Redden Intermediate Algebra]]

** Review real numbers ([[https://saylordotorg.github.io/text_intermediate-algebra/s04-01-review-of-real-numbers-and-abs.html][source]])

Multiple choice quiz:

1) Which of the following sets is correctly matched with its
   representation?
   #+begin_example
   (A) Natural Numbers = {1, 2, 3, 4, 5, â¦}
   (B) Whole Numbers = {â¦, -3, -2, -1, 0, 1, 2, 3, â¦}
   (C) Integers = {0, 1, 2, 3, 4, 5, â¦}
   (D) Rational Numbers = {ab | a, b â Z, b â  0}

   (Correct Answer: A)
   #+end_example

2) What does the ellipsis (â¦) in a set notation indicate?
   #+begin_example
   (A) The set contains only the numbers listed.
   (B) The set is empty.
   (C) The numbers in the set continue without bound.
   (D) The set includes all rational numbers.

   (Correct Answer: C)
   #+end_example

3) Which of the following statements is true regarding subsets?
   #+begin_export
   (A) The set of whole numbers is a subset of the set of natural numbers.
   (B) The set of integers is a subset of the set of whole numbers.
   (C) The set of natural numbers is a subset of the set of integers.
   (D) The set of rational numbers is a subset of the set of integers.

   (Correct Answer: C)
   #+end_export

4) What is the empty set denoted by?
   #+begin_example
   (A) {}
   (B) 0
   (C) N
   (D) Ã

   (Correct Answer: D)
   #+end_example

5) Rational numbers are defined as:
   #+begin_example
   (A) Nonterminating decimals that do not repeat.
   (B) Any number that can be written as a ratio of two integers, where the denominator is not zero.
   (C) Numbers that cannot be written as a ratio of two integers.
   (D) The set of all integers.

   (Correct Answer: B)
   #+end_example

6) Which of the following examples correctly illustrates a rational number?
   #+begin_example
   (A) Ï = 3.14159â¦
   (B) 2â = 1.41421â¦
   (C) 0.6Ì = 0.6666â¦ = 2/3
   (D) All of the above

   (Correct Answer: C)
   #+end_example

7) Irrational numbers are defined as:
   #+begin_example
   (A) Numbers that can be written as a ratio of two integers.
   (B) Nonterminating decimals that repeat.
   (C) Any numbers that cannot be written as a ratio of two integers.
   (D) The set of all natural numbers.

   (Correct Answer: C)
   #+end_example

8) The set of real numbers includes:
   #+begin_example
   (A) Only rational numbers.
   (B) Only irrational numbers.
   (C) Both rational and irrational numbers.
   (D) Neither rational nor irrational numbers.

   (Correct Answer: C)
   #+end_example


** MathSorcrer [[https://youtu.be/S116mTfk2t8?si=Uzv307alauMyxOYM][Learn Algebra from START to FINISH!]] (2023)

* IN PROGRESS LitProg Book & Comp + Data Science server [proposal]
SCHEDULED: <2024-07-10 Wed>

TODO: template information to Miah (or Dustin Williams?)

- [[https://www.pbr-book.org/][Physically Based Rendering (4e, 2023)]]
- [[https://mail.google.com/mail/u/0/#search/research/KtbxLvgpsxpCfZCrdLTdxHXNHffGVHgpNq][Email correspondence with IT]]

** Tue June 11: agreed to use server with Debian template:

#+begin_quote
Good afternoon! We agreed last Tuesday that you'd establish a server
for up to 50 Linux VMs.

My preferred distro (because that's the one I use) is LinuxMint
(Debian, uses apt package mgr).

You asked for software for the template. This is what I'd need in class:
- GNU Emacs (v29) (I will provide the .emacs config)
- SQLite (sqlite3)
- Python 3 with pip
- R (r-base)

Everything else can be installed on the fly to local dirs. E.g. our
new colleague Dr. Dall'Olio might want Java for his intro course, but
I don't know which IDE he uses.

I'd be happy to help in any way I can, and I would test drive this
whenever it's ready and convenient for you guys.
#+end_quote

* DONE Research grant application
DEADLINE: <2024-05-31 Fri>

Email to Kurt:
#+begin_quote
Kurt - I have been invited by Taylor & Francis/CRC Press to write a
book on literate programming.

There hasn't been a book on this since 1992 and they think it could be
interesting especially because of AI, and because literate programming
is a central technique in data science. This has been an interest of
mine for, well, 30 years (I used it in my PhD thesis). However, I will
not be able, I think, to complete the book in the summer - it will
take me another summer (at least). But I would be able to make
substantial progress, and the grant would help me if I could use it to
travel and interview Donald Knuth (Stanford U) the inventor of
Literate Programming.

So what I'm asking is if you still want my proposal even though the
book won't be finished - I may be able to publish a paper this fall
depending on my progress, but the book is the target.
#+end_quote

** 1st draft

Dear committee members!

I completed the third-year tenure-track review in December, 2022.

*** Summary

The purpose of my research is to lay the groundwork for the
publication of a book on Literate Programming especially for computer
and data science education. The grant will be used to kickstart my
research and provide essential input by interviewing the creator of
the literate programming methodology, Stanford U. professor Donald
Knuth, and by creating an educator's toolkit for literate programming
using the Emacs text editor and the Org-mode package for Emacs, which
allows to write literate programs in 45 different programming
languages, and which will innovate and improve computer and data
science education at Lyon College.

*** Background

In January 2024, I was invited by CRC Press/Taylor and Francis Group
to write a book on "Literate Programming". [[https://taylorandfrancis.com/][Taylor & Francis Group]] is
an established London publisher of scientific textbooks since 1852,
and [[https://www.routledge.com/statistics/statistical-learning-data-mining][CRC Press/Routledge]] is a leading publisher in mathematics,
statistics and data science.

Literate programming, also known as interactive computing with digital
notebooks like Jupyter, RStudio or Google Colaboratory, is the
dominant practice in data science research, teaching and publication
(Kery et al., 2018). It is therefore surprising that the last (and
only) book on literate programming was published in 1992 by its
inventor, Donald Knuth, a Stanford U. computer scientist (Knuth,
1992). Software written with literate programming techniques include
the TeX and METAFONT programs. TeX, especially the macro package
LaTeX, is the prevalent typesetting system in many scientific
disciplines, including physics, mathematics, computer science, and
engineering, and are required by all top journals in these fields.

The rise of AI assistants especially in programming disciplines has
renewed the interest in literate programming as a methodology. In
2023, I published an article on literate programming in data science
education (Birkenkrahe, 2023), and in 2024 I published another one on
using literate programming to mitigate negative effects of AI-assisted
coding, and spoke at several conferences and workshops (Birkenkrahe,
2023a, 2023b, 2024a, 2024b). These articles seem to have captured the
interest of users, educators, and practitioners of data science, and
ultimately led to the offer by the publisher.

I am competent and motivated to write this book partly because I have
used literate programming in my graduate studies. The title of my
thesis (in theoretical particle physics) was: "Object-Oriented,
Literate Design of a Multigrid Toolkit for Lattice Gauge Theory
Simulations" (Speh, 1994) I have integrated the methodology into all
my classes at Lyon College.

*** Status

The next steps for this research projects are:
- Submitting a book proposal to the publisher (May 2024)
- Completing a literature review (June 2024)
- Interviewing Donald Knuth at Stanford U. (June/July 2024)
- Creating a literate programming educator's toolkit (June/July 2024)
- Piloting the toolkit in a dedicated computing environment
  (May-August 2024)

*** Budget

- Return flight Little Rock-San Francisco approx. $500.
- Accommodation for 2 nights approx. $200.
- Dedicated mid-range server for up to 50 students May-August 2024
  approx. 4 * $450 = $1,800

Total approx. $2,500.

*** Outcome

During the award period, the research will have the following outcomes:
- Data gathering (interview, literature review)
- Book proposal and possibly a sample chapter
- Conference presentation and paper or poster on book/toolkit
- Pilot for a literate programming toolkit

If successful, the toolkit will be used for teaching and learning in
all my computer and data science classes at Lyon. At present, I am
using the standard infrastructure which does not allow me to use Linux
but enforces the use of Windows without administrative rights for the
students[fn:1]. This severely limits the efficiency and range of their work.

* Linux server (Research grant)

** Letter to Miah (May)
Good morning Miah -

I hope you're well. My research grant has been approved and I am keen
to move on towards using the bulk of the funds for a dedicated
computer and data science Linux server that all students in my courses
can use from both the computer labs and from home if possible.

However, it may be that a dedicated server is not the best way to go
forward, and I rely on your expertise and infrastructure experience to
suggest a better solution if there is one.

There is $2,280 available from the grant for this project, because I
don't think I want to travel to CA for an interview after all. I'll
get the data some other way from Knuth.

Though the grant is originally targeting my literate programming book
project (attached), establishing an appropriate computing
infrastructure (dubbed "Literate Programming Toolkit" in the proposal)
is part of the experience that I want the students to have - literate
programming cannot happen in a vacuum (and should not rely on Windows
boxes).

Let me know if and when you want to discuss this. I am available
pretty much all the time to come out and meet you (haven't been in
your IT building yet!).

Cheers, Marcus

PS. Ideally, I want to use the server for my fall classes -
introductory data science (Python), data structures with C++, and data
visualization (Python) - all of them in connection with Emacs. My
personal switching costs are zero because I'm privately only using
Linux.


** Dedicated Linux Server vs. Online Containers (ChatGPT)

*** Dedicated Linux Server

**** Pros
- *Customization and Control:* Complete control over the server
  environment, allowing for tailored configurations to meet specific
  course needs.
- *Performance:* Potentially better performance and resource management
  compared to shared online platforms.
- *Security:* Greater control over security measures and data privacy.
- *Offline Access:* Can be accessed within a local network even without
  internet connectivity.
- *Integration:* Easier to integrate with other on-premises systems and
  software.
- *Full Linux Experience:* Provides a real Linux environment, giving
  students hands-on experience with a full range of Linux commands and
  tools.
- *Terminal Access:* Full access to the terminal for running scripts,
  managing files, and other command-line tasks.

**** Cons
- *Maintenance:* Requires ongoing maintenance, updates, and management,
  which can be time-consuming and may require dedicated IT staff.
- *Initial Cost:* Higher upfront costs for hardware and setup.
- *Scalability:* May require significant investment to scale up
  resources for larger classes or increased demand.
- *Accessibility:* Students need to access the server through VPN or
  other secure methods when off-campus.

*** Online Containers (e.g., Google Colaboratory)

**** Pros
- *Ease of Access:* Students can access their work from anywhere with an
  internet connection, using any device.
- *Maintenance-Free:* No need to worry about server maintenance,
  updates, or hardware issues.
- *Scalability:* Easily scales to accommodate varying class sizes
  without additional investment.
- *Collaboration:* Built-in features for collaborative work, which is
  beneficial for group projects.
- *Integration with Tools:* Seamless integration with Google Drive,
  GitHub, and other online resources.
- *Virtual Environment Experience:* Allows students to work in a
  Linux-like environment with access to most Linux commands and tools.
- *Resource Management:* Automatic resource management by the platform,
  reducing the need for manual configuration.

**** Cons
- *Limited Customization:* Less control over the environment, which may
  limit the ability to customize setups for specific needs.
- *Performance Variability:* Performance can vary depending on the load
  on the platform and the network connection.
- *Data Privacy:* Concerns about data privacy and security, as data is
  stored on third-party servers.
- *Dependency on Internet:* Requires a stable internet connection for
  access and operation.
- *Limited Terminal Access:* Full terminal access requires a paid plan,
  which may limit the ability to teach certain command-line skills.

*** Learning Opportunities in Each Solution

**** Dedicated Linux Server
- *Full Linux Experience:* Students gain experience with a real Linux
  environment, including full terminal access, which is crucial for
  understanding system administration, file management, and shell
  scripting.
- *System Administration:* Opportunities to learn about server
  management, networking, and security in a real-world context.
- *Advanced Software Installation:* Ability to install and configure
  specialized software and tools that may not be available in online
  containers.

**** Online Containers (e.g., Google Colaboratory)
- *Interactive Notebooks:* Excellent for teaching data science and
  machine learning with integrated code, text, and visualizations.
- *Collaboration:* Facilitates collaborative projects and group work
  with real-time sharing and editing.
- *Ease of Use:* Simplified environment setup, allowing students to
  focus on learning programming and data analysis without worrying
  about infrastructure.
- *Accessibility:* Convenient for remote learning and accessing course
  materials from anywhere.

*** Recommendation
For a well-rounded approach, consider a hybrid solution:
- *Primary Use of Online Containers:* Use platforms like Google
  Colaboratory for ease of access, collaboration, and scalability,
  especially for data science tasks and interactive notebooks.
- *Supplement with Dedicated Server:* Maintain a dedicated Linux server
  for tasks requiring more customization, control, or specific
  software installations. This server can be used for both beginners
  and advanced courses, ensuring all students gain hands-on experience
  with a real Linux environment.

This hybrid approach provides flexibility and leverages the strengths
of both options to enhance the learning experience for students.

* DONE TRIO Workshop: game programming with JavaScript, HTML and CSS
** 1. Workshop Objectives/Goals

*** Objective
To introduce participants to the fundamentals of web development
with a focus on JavaScript, enabling them to create interactive 2D
browser games. By the end of this workshop, participants will have
a basic understanding of HTML, CSS, and JavaScript, and how these
technologies work together to create engaging web applications.

*** Goals
- Learn Basic Web Development Concepts: Participants will gain
  foundational knowledge in HTML (structure), CSS (styling), and
  JavaScript (functionality).
- Develop a Simple 2D Browser Game: Through guided instruction,
  participants will apply what they've learned to develop a simple yet
  engaging 2D browser game.
- Foster Creativity and Problem-Solving: Encourage participants to
  think creatively in game design and logically in coding to solve
  problems they encounter.
- Provide a Tangible Takeaway: Ensure every participant leaves with a
  completed project that they can share and a resource pack for
  further learning.

** 2. Workshop Outline

*** Introduction (15 minutes)
- Briefly introduce the concepts of HTML, CSS, and JavaScript.
- Discuss the workshop's goals and the project participants will
  complete.

*** Web Development Fundamentals (30 minutes)
- HTML Basics: Quick tutorial on structuring web pages.
- CSS Styling: Introduction to styling with CSS to make the game visually appealing.
- JavaScript Introduction: Overview of JavaScript syntax and basic
  programming concepts essential for game development.

*** Building the Game (60 minutes)
- Game Concept Discussion (10 minutes): Brief brainstorming session on
  simple 2D game ideas, deciding on one that will be developed during
  the workshop.
- Coding Together (40 minutes): Step-by-step guided coding session
  where participants will work on their games, implementing game
  logic, and player interactions.
- Debugging and Testing (10 minutes): Participants test their games,
  identify any bugs, and learn basic debugging techniques.

*** Wrap-Up and Discussion (15 minutes)
- Participants share their games with the group.
- Open discussion on challenges faced and how they were overcome.
- Brief talk on how the skills learned can be applied to other
  projects.

*** Interactive, Hands-On Activity
The core of the workshop will be the hands-on development of a 2D
browser game, encouraging participants to apply new skills in
real-time, with the support of the instructor.

** 3. Workshop Takeaways

*** Physical Reminder
Participants will leave the workshop with two main takeaways:
- Completed 2D Browser Game: A fully functional game hosted online,
  which they can continue to develop and share.
- Resource Pack: A comprehensive resource pack including:
  1. A printed Workshop Handbook containing step-by-step instructions
     for recreating the game project, additional challenges to try,
     and a glossary of terms and concepts covered during the workshop.
  2. A Quick Reference Guide to HTML, CSS, and JavaScript, providing a
     summary of key syntax and concepts for easy recall.

*** Digital Resources
Participants will also have access to online resources, including:
- Access to the workshop's code repository, containing source code,
  assets, and extra challenges.
- A list of recommended online platforms and communities for continued
  learning and project sharing.

This workshop is designed to be the first step in a participant's
journey into web development and game programming, providing them with
the knowledge, resources, and inspiration to continue exploring on
their own.

* DONE Summer Grant 2024
** Project Summary:

The essence of my proposed research is to establish the foundational
work necessary for publishing a book on Literate Programming,
specifically tailored to enhance computer and data science
education. This initiative will be catalyzed through the grant,
enabling me to commence my research and gather invaluable insights by
interviewing Professor [[https://en.wikipedia.org/wiki/Donald_Knuth][Donald Knuth]] of Stanford University, the
progenitor of literate programming. Furthermore, I plan to develop an
educator's toolkit for literate programming. This toolkit, leveraging
the Emacs text editor and the Org-mode package, will support literate
programming in 45 different programming languages, thus offering an
innovative approach to bolstering computer and data science pedagogy
at Lyon College.

** Background and Justification:

In January 2024, I was honored with an invitation from [[https://www.routledge.com/statistics/statistical-learning-data-mining][CRC
Press]]/[[https://taylorandfrancis.com/][Taylor and Francis Group]], a prestigious London-based publisher
of scientific textbooks since 1852, to author a book on "Literate
Programming". This methodology, synonymous with interactive computing
through digital notebooks like Jupyter, RStudio, and Google
Colaboratory, remains a cornerstone in data science research,
teaching, and publication (Kery et al., 2018). Despite its ubiquity,
the literature on this subject has been scant since Donald Knuth's
seminal publication in 1992. My previous publications and conference
presentations in 2023 and 2024 have sparked a renewed interest in
literate programming, especially in the context of AI-assisted
programming. My unique position is further strengthened by my
practical experience with literate programming during my graduate
studies in theoretical particle physics (Speh, 1994), as well as its
integration into my courses at Lyon College (Birkenkrahe, 2023).

** Research Status and Next Steps:

The forthcoming phases of this research project include:
- Submission of a detailed book proposal to the publisher by May 2024.
- Completion of an extensive literature review by June 2024.
- An interview with Donald Knuth at Stanford University, scheduled for
  June/July 2024.
- Development and piloting of the literate programming educator's
  toolkit from May to August 2024.

** Budget Overview:

The financial blueprint for the project encompasses:
- A return flight from Little Rock to San Francisco at an estimated
  cost of $500.
- Accommodation for two nights, projected at $200.
- A dedicated mid-range server for student use from May to August
  2024, costing approximately $1,800[fn:2].
This culminates in a total budget requirement of roughly $2,500.

** Expected Outcomes:

The grant period is expected to yield the following results:
- Comprehensive data collection through interviews and literature
  reviews.
- A robust book proposal, potentially accompanied by a sample chapter.
- A conference presentation, along with a paper or poster detailing
  the book and toolkit.
- A pilot phase for the literate programming toolkit, enhancing our
  teaching and learning framework.

This project not only aims to bridge the current gap in literate
programming literature but also seeks to innovate the educational
tools available for computer and data science instruction at Lyon
College. Currently constrained by infrastructure that limits the use
of Linux and imposes Windows without administrative rights, this
initiative promises to significantly expand the computational
capabilities accessible to our students. This is a critical step
forward, considering my previous efforts to supplement our resources
with Raspberry Pi Linux boxes, which, while beneficial, fall short of
meeting the demands of more complex applications like big data and
machine learning.

** References

- Birkenkrahe M. Teaching Data Science with Lite\-rate Pro\-gramming
  Tools. Digital. 2023; 3(3):232-250. [[https://doi.org/10.3390/digital3030015][doi.org/10.3390/digital3030015]]

- Kery MB, Radensky M, Arya M, John BE, Myers BA. The Story in the
  Notebook: Exploratory Data Science Using a Literate Programming
  Tool. In: Proceedings of the 2018 CHI Conference on Human Factors in
  Computing Systems. New York, NY, USA: Association for Computing
  Machinery; 2018:1-11. doi:10.1145/3173574.3173748.

- Knuth DE. Concrete Mathematics: A Foundation for Computer
  Science. 2nd ed. Stanford, California: Center for the Study of
  Language and Information; 1992. CSLI Lecture Notes, no. 27. ISBN
  0-937073-80-6.

- Speh M. Object oriented, literate design of a multigrid toolkit for
  lattice gauge theory simulations. [PhD thesis]. Hamburg: University
  of Hamburg; 1996.

* Other ideas
** Quantum Computing

- [[https://www.quantamagazine.org/the-quest-to-quantify-quantumness-20231019/?mc_cid=a5a50ca368&mc_eid=a06aae8e59][The Quest to Quantify Quantumness]]
- [[https://www.mdpi.com/1999-5903/15/3/94#:~:text=QC%20can%20revolutionize%20the%20healthcare,diseases%2C%20and%20accurate%20drug%20discoveries.][Quantum Computing for Healthcare: A Review]]

** Build a simple chess AI in JavaScript

- [[https://dev.to/zeyu2001/build-a-simple-chess-ai-in-javascript-18eg][dev.to chess AI in JS (2021)]]
- [[https://www.freecodecamp.org/news/simple-chess-ai-step-by-step-1d55a9266977/][freeCodeCamp (2017)]]

** [[https://learn.microsoft.com/en-us/training/paths/minecraft-python-coding-academy/][Learning Python with Minecraft]]
** [[https://codakid.com/guide-to-minecraft-modding-with-java/][Learning Java with Minecraft]]
** [[https://nostarch.com/codingwithminecraft][Coding with Minecraft]] (Sweigart)
** Cybersecurity with Python Lyon College Certificate
*** Letter
David - I'd like to propose the creation of a cybersecurity with
Python certificate summer course. Below are some first thoughts.

I'd like to know from the division heads meeting if there is an
interest at Lyon to develop such an offering. I do know that there are
students and professional members of the community interested.

There is a wide variety of cybersecurity courses out there, most of
them as virtual online courses, and most of them do not seem to impart
the practical, in-depth skills that this course will offer - an
example is the new [[https://www.coursera.org/professional-certificates/google-cybersecurity][Google Cybersecurity Professional Certificate]] - an
8 course series of ca. 137 hours duration with only basic information.

The summer course would be a pilot but it should already offer a Lyon
certificate. Since cybersecurity is a fast-changing field, there are
no definite accreditation or certificate standards (though of course
there are some very popular ones (like [[https://www.comptia.org/certifications/cybersecurity-analyst][CompTIA]]).

This program is special because it brings together computer science,
industry knowledge, and data science.

My hope is that we might be able to put together a portfolio of
different certificates, ideally with more than one instructor per
certificate.

*** Cybersecurity with Python Lyon College Certificate

**** Schedule

The course would meet on 23 days (May 28-June 27) for 2 hours each
day. There would be 2 hours homework outside of class - in total,
this is the equivalent of 3 credit course (92 hours).

For the first time, the course should take care in the classroom at
Lyon, though a hybrid is possible (classroom + online attendees). To
attract a diverse group of students, it could take place during
lunchtime or evening hours.

No prerequisites except a general affinity to numbers and
computers. The programming language (Python) and the necessary maths
(graph theory, discrete maths, number theory, combinatorics) are
introduced and unpacked during the course.

**** Certificate

Successful course completion (> 60% of available points) would come
with a Lyon College Certificate "Cybersecurity with Python" that
lists major course components mastered:
1. Securing computer networks with Graph algorithms.
2. Analyzing and monitoring network traffic and packet data.
3. Identifying threats with Social Network Analysis.
4. Tracking people in space with digital information.
5. Cybersecurity capstone project.

**** Instructor

- Dr. Marcus Birkenkrahe has been a teacher of computer and data
  science and business informatics since 2007. Prior to teaching, he
  was head of competitive intelligence at Shell International, and
  head of knowledge management at Accenture. At Shell, he supervised
  globewide network penetration testing and participated in global
  scenario analysis. At Accenture, he helped to build an active threat
  simulator for professional IT consultants. He is associate editor of
  the International Journal of Data Science, and editorial board
  member of the International Journal of Big Data Management.

**** Draft syllabus

The draft syllabus can be adapted as per the learning pace of the
students:
- Each topic includes practical examples and exercises for better
  understanding.
- The course provides resources for further learning and
  exploration.
- The course includes discussions on cybersecurity ethics and
  responsible conduct throughout the course.
- Regular assessments, quizzes, and feedback are integrated to gauge
  the understanding and learning progress of the students.

Day 1-3: Introduction to Cybersecurity and Python

Day 1: Introduction to Cybersecurity and Overview
- Cybersecurity fundamentals
- Importance of Cybersecurity
- Python for Cybersecurity

Day 2: Basic Python Programming
- Python data types, variables, and operations
- Control structures (loops, conditionals)
- Functions and modules

Day 3: Working with Libraries in Python
- Introduction to libraries (NumPy, Pandas)
- Installation and basic operations

Day 4-6: Securing Networks with Graph Theory

Day 4: Introduction to Graph Theory
- Basics and terminology
- Real-world application in network security

Day 5: Graph Algorithms
- Dijkstra's, Bellman-Ford algorithms
- Detecting vulnerabilities in networks

Day 6: Python Libraries for Graph Theory
- NetworkX
- Creating and analyzing network graphs

Day 7-9: Building a Network Traffic Analysis Tool

Day 7: Introduction to Network Traffic Analysis
- Understanding network traffic
- Importance and application in Cybersecurity

Day 8: Packet Analysis with Python
- Working with pcap files
- Analyzing packet data

Day 9: Building a Basic Network Traffic Analysis Tool
- Python scripting for traffic analysis
- Real-time traffic monitoring

Day 10-13: Identifying Threats with Social Network Analysis

Day 10: Introduction to Social Network Analysis (SNA)
- Fundamentals and principles of SNA
- Application in cybersecurity

Day 11: SNA Metrics and Algorithms
- Centrality measures, clustering coefficients
- Detecting potential threats using SNA

Day 12-13: Python for Social Network Analysis
- Using Python libraries for SNA (NetworkX)
- Case study: Identifying Threats with SNA

Day 14-17: Tracking People in Physical Space with Digital Information

Day 14: Introduction to Digital Tracking
- Concepts and techniques
- Ethical considerations

Day 15: Geolocation and Tracking with Python
- Working with GPS data
- Analyzing and visualizing location data

Day 16-17: Building a Digital Tracking System
- Python libraries and APIs for tracking
- Case study: tracking people in physical space

Day 18-20: Python and Cybersecurity Tools

Day 18: Working with Cybersecurity Tools in Python
- Popular cybersecurity libraries and tools
- Integrating Python with cybersecurity tools

Day 19-20: Developing a Cybersecurity Project
- Students will start working on a small cybersecurity project
  integrating the concepts learned

Day 21-23: Project Work and Conclusion

Day 21-22: Continue Project Work
- Working on the project
- Solving problems and doubts

Day 23: Conclusion and Presentation
- Project presentation
- Conclusion and feedback
- Further learning resources and pathways

**** References

https://www.hackers-arise.com/

Hernandez-Ramos JL, Matheu SN, Skarmeta A. The Challenges of Software
Cybersecurity Certification [Building Security In]. IEEE Secur
Priv. 2021;19(1):99-102. doi:10.1109/MSEC.2020.3037845.

Matheu SN, HernÃ¡ndez-Ramos JL, Skarmeta AF, Baldini G. A Survey of
Cybersecurity Certification for the Internet of Things. ACM Comput
Surv. 2021;53(6):Article 115. doi:10.1145/3410160.

**** Textbooks

1) Reilly D. Math for Security: From Graphs and Geometry to Spatial
   Analysis. September 2023:312. ISBN-13: 9781718502567.

2) OccupyTheWeb. Linux for Hackers: Getting Started with Networking,
   Scripting, and Security in Kali. December
   2018:248. ISBN-13: 9781593278557.

3) Stamp M. Introduction to Machine Learning with Applications in
   Information Security. 2nd ed. Chapman and Hall/CRC; 2022.

*** Syllabus from claude.ai

Here is a 23 day course syllabus on cybersecurity with Python, 2 hours
per day:

Day 1: Introduction to Cybersecurity
- Overview of cybersecurity concepts, threats, and tools
- Introduction to Python programming

Day 2: Networking Fundamentals
- IP addresses, subnets, routers, switches
- OSI model overview
- Hands-on: Writing a port scanner in Python

Day 3: Graph Theory Basics
- Graph terminology and representations
- Shortest path algorithms
- Hands-on: Implementing Dijkstra's algorithm in Python

Day 4: Modeling Networks as Graphs
- Representing computer networks as graphs
- Analyzing network topology with graph theory
- Hands-on: Building a network map visualization

Day 5: Hardening Networks with Graphs
- Using centrality measures to identify critical nodes
- Simulating cascading failures
- Hands-on: Writing a network vulnerability assessor

Day 6: Encryption and Cryptography
- Symmetric vs asymmetric encryption
- Hash functions, digital signatures
- Hands-on: Implementing encryption in Python

Day 7: Securing Communication Protocols
- Analyzing TLS, SSH, HTTPS
- Finding weaknesses in implementations
- Hands-on: Penetrating protocols with Python

Day 8: Threat Intelligence
- Understanding the threat landscape
- Gathering and analyzing threat intelligence
- Hands-on: Building a threat intel pulls with Python

Day 9: Social Network Analysis Concepts
- Graph theory applied to social networks
- Centrality measures for identifying key actors
- Hands-on: Analyzing social networks with Python

Day 10: Analyzing Attackers with Social Networks
- Modeling adversary groups as social networks
- Identifying relationships and hierarchies
- Hands-on: Social network analysis of threat actors

Day 11: Physical Security and Surveillance
- Access control systems
- Video surveillance and tracking
- Hands-on: Building a motion detector with Python

Day 12: Tracking People Digitally
- WiFi, Bluetooth, RFID tracking techniques
- Facial recognition and gait analysis
- Hands-on: Implementing a tracking algorithm

Day 13: Dark Web Crawling
- The dark web and TOR hidden services
- Crawling .onion sites with Python
- Hands-on: Building a dark web crawler

Day 14: Malware Analysis
- Static and dynamic malware analysis
- Reverse engineering concepts
- Hands-on: Disassembling malware samples with Python

Day 15: Network Traffic Analysis
- Inspecting traffic with packet capturing
- Identifying anomalies and threats
- Hands-on: Building an IDS in Python

Day 16: Securing Web Applications
- Common web vulnerabilities
- Cross-site scripting and SQL injection
- Hands-on: Finding vulnerabilities in code

Day 17: Hardening Operating Systems
- Linux and Windows hardening
- Configuration baselining and monitoring
- Hands-on: Automating system hardening with Python

Day 18: Cloud Security
- Securing infrastructure, platform, software layers
- Cloud-native security tools and techniques
- Hands-on: Scanning cloud environment security

Day 19: Securing Container Environments
- Container concepts and vulnerabilities
- Kubernetes security principles
- Hands-on: Automating Kubernetes security with Python

Day 20: Incident Response
- Incident response planning and procedures
- Digital forensics concepts and tools
- Hands-on: Performing forensic analysis on systems

Day 21: Adversarial Emulation
- Purple teaming concepts
- Threat modeling and wargaming
- Hands-on: Building an attack simulator with Python

Day 22: Compliance and Governance
- Mapping controls to regulations and frameworks
- Automating control testing and validation
- Hands-on: Building a compliance dashboard in Python

Day 23: Course Wrap Up
- Final questions and discussion
- Review of concepts covered
- Next steps for advancing cybersecurity skills

**** Textbooks

- "TCP/IP Illustrated" by Richard Stevens
- "Network Warrior" by Gary Donahue
- "Introduction to Graph Theory" by Richard Trudeau
- "Serious Cryptography" by Jean-Philippe Aumasson
- "Cryptography Engineering" by Niels Ferguson
- "Network Science" by Albert-LÃ¡szlÃ³ BarabÃ¡si
- "Practical Malware Analysis" by Michael Sikorski
- "The Web Application Hacker's Handbook" by Dafydd Stuttard
- "Linux Hardening in Hostile Networks" by Kyle Rankin
- "AWS Security" by Jerry Hargrove
- "The Practice of Network Security Monitoring" by Richard Bejtlich
- "CISSP Study Guide" by Eric Conrad

*** Sources

https://hackernoon.com/navigating-the-stormy-seas-of-cybersecurity-the-power-of-high-entropy-passwords

* Footnotes
[fn:3] RPH 120 "Old Testament" and RPH 150 "World Religions", taught in
spring 2024 at Lyon College ([[https://www.lyon.edu/religion-and-philosophy-courses][Catalog]]).

[fn:1]I used most of my research funds given to my by the college when
I first joined in 2021 to buy 20 Raspberry Pi Linux boxes that I use
in several classes but that do not satisfy the computational needs of
many interesting applications, for example for big data and machine
learning.

[fn:2]An alternative to renting a cloud-based server hosted outside of
Lyon is to purchase a dedicated server of our own. I am currently
checking this option with Lyon College IT services. If this proves
viable, the $1,800 would go back to Lyon College to purchase a
mid-level server whose cost would be in the same ballpark.

