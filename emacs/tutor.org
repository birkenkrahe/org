#+TITLE:GNU Emacs & Org-mode Tutorial
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Lyon College courses Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* GNU Emacs
** Overview

   This short tutorial to guide you to your first steps with the GNU
   Emacs editor. You should also take time to complete the onboard
   tutorial. I will make a video of this tutorial, too. The sequence
   of lessons follows losely the GNU Emacs Reference Card ([[https://github.com/birkenkrahe/org/blob/master/emacs/refcard.pdf][PDF]]).
   
** Installation

   It is best if you get Emacs for your own PC so that you have all
   the necessary privileges. [[https://github.com/birkenkrahe/org/blob/master/emacs/install.org][See here]] for brief installation
   instructions.

** Open Emacs

   * If there's a Desktop shortcut, double-click on it to open Emacs
   * If there is no Destktop shortcut, open a terminal:

   #+begin_example
   Windows Search bar: CMD
   #+end_example
   
   * In the terminal, enter this:

   #+begin_example
   "C:\Program Files\GNU Emacs 27\x86_64\bin\emacs"
   #+end_example

   Or the following command to open a vanilla Emacs in the terminal
   (no graphics):
   #+begin_example
   emacs -nw
   #+end_example
   
   #+begin_quote
   Troubleshoot: check the location of the file ~emacs.exe~ using the
   File explorer, and correct the ~PATH~ accordingly.
   #+end_quote

   You should now see the Emacs startup screen[fn:2]:

   #+caption: GNU Emacs startup screen
   #+attr_html: :width 500px
   [[./img/startup.png]]

   You can always get back to this screen by typing CTRL+h CTRL+a (two
   commands, hold down the CTRL key and press the letter).

   Note: you can also start Emacs in the terminal alone (no graphics
   window). To do this, add a ~-nw~ (for "no window"):
   #+begin_example
   C:\Program Files\GNU Emacs 27\x86_64\bin\emacs -nw &
   #+end_example

** Shut or suspend Emacs

   Shut Emacs down with the key sequence ~C-x C-c~, which on your
   keyboard means CTRL+x followed by CTRL+c.

   To only suspend Emacs, press ~C-z~ (on the keyboard: CTRL+z).

** Open the Emacs tutorial

   Emacs has an onboard tutorial. To open it, type

   #+begin_example
   CTRL-h t
   #+end_example

   This command consists of two parts:
   1) press ~CTRL~, hold it and press x (you see ~C-x~ at the bottom of
      the screen)
   2) press ~h~

   The tutorial should appear in the Emacs buffer. It takes about 1
   hour to work through. This is well worth it if you want to use
   Emacs.

   #+begin_quote
   Troubleshoot: if you make any mistake with your commands, type
   CTRL-g to abort the current command, then start over.
   #+end_quote
** Read a file into Emacs

   This lesson consists of several steps:

   - download a text file from GitHub
   - open an empty file inside Emacs
   - copy ("yank") or insert the file into Emacs
   - save the file in Emacs

   1) Open a browser and go to
      ~https://github.com/birkenkrahe/org/blob/master/emacs/emacs.txt~
      ([[https://github.com/birkenkrahe/org/blob/master/emacs/emacs.txt][follow this link]]).
   2) Copy the raw contents in your clipboard by clicking on the copy
      icon at the top of the file.
   3) Go to the Emacs window ("frame"), or open GNU Emacs, and type
      ~C-x C-f~ (on the keyboard, this looks like CTRL+x followed by
      CTRL-f - from now on, I will use the shorthand notation).
   4) Delete the path all the way, and replace it by ~/ (your home
      directory).
   5) Enter ~emacs.txt~ after the ~/ and press ENTER (~RET~).
      #+begin_example
      Find file: ~/emacs.txt
      #+end_example
   6) In the buffer (you know that you're there because of the cursor
      that should be blinking at you at the top of the empty page),
      press ~C-y~ ("yank" the clipboard content).
   7) The text that you copied to the clipboard earlier, should now
      show up in the buffer.
   8) The file is unsaved - indicated by the two stars left of the
      buffer name at the bottom of the page in the "modeline"
      ("\**"). Save it by typing ~C-x C-s~.
   9) You should get a confirmation at the bottom of the buffer (in
      the "echo area"), and the stars are replaced by dashes ("\---")

   #+caption: emacs.txt buffer (unsaved)
   #+attr_html: :width 500px
   [[./img/emacstxt.png]]

   #+begin_quote
   Troubleshoot: if the copying with the copy button in GitHub does
   not work, click on "Raw". The text will then be shown in a new tab
   and you can copy it with CTRL+a CTRL+c.
   #+end_quote

** Insert a file into an Emacs buffer

   1) Open a new file (~C-x C-f~) and name it ~/emacs1.txt.
   2) In the empty buffer of the new file, enter
      #+begin_example
      C-x i
      emacs.txt RET
      #+end_example
   3) You should now see the text from the other file in the buffer.
   4) Save the file with ~C-x C-s~ as before.

** Open a directory

   The Emacs file manager is called ~dired~. You open it to the
   current directory with ~C-x d~.

   Emacs now suggests a directory to open in the echo area. If you
   press ENTER, this is the directory that you will see, but you can
   also enter any other directory that you're allowed to enter.

   #+caption: dired buffer (current/home directory)
   #+attr_html: :width 500px
   [[./img/dired.png]]

   There is a lot of information here that won't tell you much. But
   you can see (on Windows) that Emacs knows that my home directory
   ~~\~ stands for ~c:/Users/birkenkrahe~ on my Windows box.

   You can see "hidden" files (starting with a dot) - mostly for
   configuration by the PC, and regular files.

   Press ~s~ inside the buffer to sort the files according to the
   creation date. You can now see your recent work at the top. File
   names followed by a tilde (~~~) are automatically generated backup
   files. Unsaved files have a hash (~#new.txt~) and can
   be recovered if you accidentally shut down Emacs.

   #+caption: dired buffer sorted
   #+attr_html: :width 500px
   [[./img/direds.png]]

** Open the buffer list

   To see a list of open buffers, enter ~C-x C-b~.

   #+caption: Buffer list
   #+attr_html: :width 500px
   [[./img/bufferlist.png]]

   To get to the last buffer: ~C-x b~ - this command requires a
   confirmation, but you can also enter another buffer name, helped by
   auto-completion.

   There are functions ~M-x next-buffer~ and ~M-x previous-buffer~,
   which are bound to the keys ~C-x <right>.~ and ~C-x <left>~,
   respectively.
   
** Move around in a file

   * Up one line: C-p
   * Down one line: C-n
   * Forward one char: C-f
   * Backward one char: C-b
   * Beginning of line: C-a
   * End of line: C-e
   * Top of buffer: C-<
   * Bottom of buffer: C->

   The Emacs tutorial will help you train these key sequences.
   
** Mark a region, "kill" and "yank" it back

   * Set mark: C-SPC
   * Kill line from cursor: C-k
   * Kill region: C-w
   * Yank region: C-y

   These keys - like all keys - can also be rebound to the keys that
   you are used to (copy with ~C-c~, paste with ~C-v~, cut with ~C-x~), but
   I don't recommend it.

   To switch is very easy: ~M-x cua-mode RET~ does the trick. This
   mode toggles, i.e. invoking ~M-x cua-mode RET~ again will revert to
   the original Emacs bindings.

** Create an init configuration file

   You find a sample ~/.emacs~ file in the GitHub ~org~ repo
   [[https://github.com/birkenkrahe/org/blob/master/emacs/.emacs][here]]. Here is a shorter version of the code[fn:3]:
   
   #+begin_src emacs-lisp
     ;; required for tangling code
     (require 'ob-R)

     ;; active Babel languages
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((R . t)
	(emacs-lisp . t))

     ;; Syntax highlight code in your SRC blocks The last variable removes
     ;; the annoying “Do you want to execute” your code after: C-c C-c
     (setq org-confirm-babel-evaluate nil
	   org-src-fontify-natively t
	   org-src-tab-acts-natively t)

     ;; enable snippet expansion via org-structure-template-alist
     (require 'org-tempo)

     ;; get packages from MELPA package manager
     (require 'package)
     (add-to-list 'package-archives
		  '("melpa-stable" . "https://stable.melpa.org/packages/"))

     ;; set the path to R for ESS
     (setq inferior-ess-r-program "c:/Program Files/R/R-4.1.2/bin/R.exe")
   #+end_src

   1) Create a file ~~/.emacs~ and put the sample file code into it
   2) Save the file (~C-x C-s~), and restart Emacs (~C-x C-c~)

** Use the Emacs package manager

   We're going to use the package manager to find a minor theme that
   makes Org-mode files nicer to look at. 
   
   1) Open the package manager with ~M-x package-list-packages RET~
   2) In the package manager, run ~M-x package-refresh-contents~
   3) Find the package ~org-beautify-theme~ with ~C-s~
   4) Mark this package and the next package, ~org-bullets~ for
      installation by typing ~i~
   5) Install the packages with ~x~ (confirm)
   6) Open the custom themes buffer with ~M-x custom-themes RET~
   7) Mark ~Select more than one theme at a time~, then mark
      ~org-beautify~[fn:4]
   8) Click on ~Save theme settings~. This will save the necessary
      Lisp code in your ~~/.emacs~ file.

   #+caption: GNU Emacs package manager
   #+attr_html: :width 500px
   [[./img/packages.png]]
   
** Create an Org-mode file

   In your home directory, create a file ~ob.org~. We will use this
   file to explore Org-mode and the Babel package. Babel allows us to
   run code chunks inside Emacs. Babel lets us "tangle" ~.org~ files
   to source code files, and "weave" ~.org~ files to documentation.

   Org-mode has extensive [[https://orgmode.org/][online]] and onboard documentation. To access
   the onboard documentation, type ~C-h i~. This is the entry point
   into the GNU Emacs Info system.

   #+caption: GNU Emacs Info system
   #+attr_html: :width 500px
   [[./img/info.png]]

** Weaving documentation
** Run code inside an Org-mode file
** Tangling source code
** Run commands in a shell
* Footnotes

[fn:4]When installing a new theme, Emacs might ask you to validate the
package - since these packages could lead to an infiltration of your PC.

[fn:3]I deleted those lines that are not of immediate relevance to
this course and to running R in Emacs.

[fn:2]This screen differs from the one you see when I work with Emacs
in class, because I have disabled the menu bar, the tool bar, and the
tool tips. You can do this in your ~.emacs~ file later on, or you can
do it right away by typing, in Emacs, the commands:
#+begin_example
  M-x menu-bar-mode
  M-x tool-bar-mode
  M-x tooltip-mode
#+end_example

[fn:1]The ~PATH~ variable is the search path that the computer uses to
find a file. You can set it yourself on a computer where you have
administrative capabilities (such as your personal computer but not in
the lab).
