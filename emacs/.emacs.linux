;; --- Basic Settings ---
(put 'dired-find-alternate-file 'disabled nil) ;; Enable dired alternate file
(setq inhibit-startup-screen t)               ;; Remove startup screen
(tool-bar-mode -1)                            ;; Disable toolbar
(menu-bar-mode -1)                            ;; Disable menu bar
(setq column-number-mode t)                   ;; Enable column numbers

;; --- Package Management ---
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))

;; --- Load Paths ---
(add-to-list 'load-path "/home/aletheia/.emacs.d/lisp")

;; --- Org-mode and Org-Babel Configurations ---
(require 'org)
(require 'org-tempo)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (sql . t)
   (python . t)
   (emacs-lisp . t)
   (C . t)
   (dot . t)))

(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-html-validation-link nil
      org-hide-emphasis-markers t
      org-image-actual-width nil)

;; Org skeleton for header info
(define-skeleton org-skeleton
  "Header info for an Emacs Org-mode file."
  "Title: "
  "#+TITLE:" str " \n"
  "#+AUTHOR:" str " \n"
  "#+SUBTITLE:" str " \n"
  "#+STARTUP: overview hideblocks indent\n"
  "#+OPTIONS: toc:nil num:nil ^:nil\n"
  "#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes\n"
  "#+PROPERTY: header-args:python :session *Python* :results output :exports both :noweb yes\n"
  "#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes\n"
  "#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes\n")
(global-set-key [C-S-f4] 'org-skeleton)

;; --- Required Babel Packages ---
(require 'ob-sqlite)
(require 'ob-sql)
(require 'python)
(require 'ob-emacs-lisp)
(require 'ob-R)
(require 'ob-C)
(require 'ob-shell)
(require 'ob-python)

;; --- Org Agenda Configuration ---
(setq org-agenda-files ;; org-capture files
      ;;(append
       (directory-files "~/GitHub/admin/Notes/" t "\\.org$")
       ;;      (directory-files "~/GitHub/admin/RoamNotes/" t "\\.org$")
       ;;)
      )

;; go to org-capture files
(global-set-key (kbd "C-c o")
                (lambda ()
                  (interactive)
                  (find-file "~/GitHub/admin/Notes/")))

;; go to current class files
(global-set-key (kbd "C-c w")
                (lambda ()
                  (interactive)
                  (find-file "~/GitHub/admin/spring25/")))

;; how to call the agenda dashboard
(global-set-key (kbd "C-c a") 'org-agenda)

;; sequential work progress states see orgguide 9.3 sect. 5.2 p.11
(setq org-todo-keywords
      '((sequence "NEXT" "TODO" "IN PROGRESS" "READ" "WAITING" "SOMEDAY" "PROJECT" "FEEDBACK" "VERIFY" "|" "DONE" "CANCELLED")))

;; --- Key Bindings ---
(global-set-key (kbd "<f6>") 'org-display-inline-images)
(global-set-key (kbd "<f7>") 'org-remove-inline-images)
(global-set-key (kbd "M-o") 'ace-window)
(global-set-key (kbd "C-x r f") 'recentf-open-files)
(define-key global-map "\C-\M-Q" 'unfill-region)

;; --- Appearance and Themes ---
(load-theme 'doom-ir-black t) ;; Set color theme

;; --- Ivy, Swiper, and Counsel Configuration ---
(ivy-mode)
(setq ivy-use-virtual-buffers t
      enable-recursive-minibuffers t
      search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)

;; --- Org Presentations ---
(require 'org-tree-slide)
(with-eval-after-load "org-tree-slide"
  (global-set-key (kbd "<f9>") 'org-tree-slide-mode)
  (define-key org-tree-slide-mode-map (kbd "<left>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<right>") 'org-tree-slide-move-next-tree))
(org-tree-slide-simple-profile)

;; --- Org-Present Configuration ---
(autoload 'org-present "org-present" nil t)
(add-to-list 'load-path "~/path/to/org-present")

;; --- Utility Functions ---
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single logical line."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))

(defun iwb ()
  "Indent whole buffer, delete trailing whitespace, and untabify."
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

(defun copy-buffer-name-to-kill-ring ()
  "Copy the current buffer name to the kill ring."
  (interactive)
  (let ((buffer-name (buffer-name)))
    (kill-new buffer-name)
    (message "Copied buffer name: %s" buffer-name)))

;; --- Org Bullets Configuration ---
(defun org-bullets-mode-in-buffer ()
  "Enable org-bullets-mode in the current buffer."
  (interactive)
  (if (featurep 'org-bullets)
      (org-bullets-mode 1)
    (message "org-bullets is not available. Please install it first.")))

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; --- Org-add-note Configuration ---
;; put not in :LOGBOOK: ... :END: drawer
(setq org-log-into-drawer t)

;; --- Org-capture Configuration ---
(require 'org-capture)

;; Optional: Keybinding to invoke capture
(global-set-key (kbd "C-c c") 'org-capture)

;; Org-capture templates (offered with C-c c)
(setq org-capture-templates
      '(
        ;; Log Entry with Date
        ("a" "Journal" entry
         (file+datetree "~/GitHub/admin/Notes/journal.org")
         "*** %U\n%?"
         :empty-lines 1)

        ;; Letters
        ("b" "Letters" entry
         (file "~/GitHub/admin/Notes/letters.org")
         "* Email To: %?\n  %u\n  - Subject: \n"
         :empty-lines 1)

        ;; Todo Item
        ("c" "Todo" entry
         (file+headline "~/GitHub/admin/Notes/todos.org" "Inbox")
         "* %?\n  %u\n"
         :empty-lines 1)

        ;; Classes
        ("d" "Classes" entry
         (file "~/GitHub/admin/Notes/classes.org")
         "* %?\n  %u\n"
         :empty-lines 1)

        ;; General Notes
        ("e" "Notes" entry
         (file "~/GitHub/admin/Notes/notizen.org")
         "* %?\n  %u\n -"
         :empty-lines 1)

        ;; Courses
        ("f" "Course" entry
         (file "~/GitHub/admin/Notes/courses.org")
         "* %?\n  %u\n"
         :empty-lines 1)

        ;; Semesters
        ("g" "Semesters" entry
         (file "~/GitHub/admin/Notes/semesters.org")
         "* %?\n  %u\n"
         :empty-lines 1)

        ;; Admin
        ("h" "Admin" entry
         (file "~/GitHub/admin/Notes/admin.org")
         "* %?\n  %u\n"
         :empty-lines 1)

        ;; Sources
        ("i" "Sources" entry
         (file "~/GitHub/admin/Notes/sources.org")
         "* %?\n  %u\n"
         :empty-lines 1)

        ;; Books
        ("j" "Books" entry
         (file "~/GitHub/admin/Notes/books.org")
         "* %?\n  %u\n"
         :empty-lines 1)

        ;; Letters
        ("k" "Letters" entry
         (file "~/GitHub/admin/Notes/letters.org")
         "* %?\n  %u\n"
         :empty-lines 1)
	
        ))

;; Ensure tags can be completed in capture buffers
(setq org-complete-tags-always-offer-all-agenda-tags t)

;; Custom function to make tag input easier in capture buffers
(defun org-capture-add-tag ()
  "Add a tag in the Org capture buffer."
  (interactive)
  (org-set-tags-command))

;; Add a keybinding specifically for tags in capture mode
(add-hook 'org-capture-mode-hook
          (lambda ()
            (define-key org-capture-mode-map (kbd "C-c t") 'org-capture-add-tag)))

;; LaTeX beamer presentation
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass[presentation,notes=hide]{beamer}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

;; Fold all bullets in a section
(defun org-fold-all-bullets ()
  "Fold all bullet points in the current Org-mode buffer, including numbered and non-numbered lists."
  (interactive)
  (org-overview) ;; Collapse the entire buffer to top-level headings
  (org-cycle '(64)) ;; Show top-level headings only
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^\\([0-9]+[.)]\\|[-+*]\\) " nil t) ;; Match numbered and non-numbered bullets
      (save-excursion
        (goto-char (match-beginning 0))
        (org-cycle nil) ;; Fold the current item
        ;; Recursively handle nested items
        (when (save-excursion
                (forward-line)
                (looking-at-p "^\\s-+\\([0-9]+[.)]\\|[-+*]\\) "))
          (let ((end (save-excursion
                       (org-end-of-subtree)
                       (point))))
            (while (re-search-forward "^\\s-+\\([0-9]+[.)]\\|[-+*]\\) " end t)
              (save-excursion
                (goto-char (match-beginning 0))
                (org-cycle nil)))))))))

;; --- Initial frame layout and position ---
(setq initial-frame-alist
      '((width . 80)    ;; Width in characters
        (height . 55)   ;; Height in characters
        (top . 0.5)     ;; Center vertically
        (left . 0.5)))  ;; Center horizontally

;; --- Miscellaneous Configurations ---
(setq recentf-max-menu-items 25
      recentf-max-saved-items 25)
(recentf-mode 1)

(require 'sql)
(setq sql-sqlite-options '("-interactive"))
(setq package-check-signature nil)
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")

(add-to-list 'Info-directory-list "~/my-info-files")
(require 'ox-reveal)
(require 'ox-ipynb)

;; doom-modeline-mode
;; (use-package doom-modeline
;;   :ensure t
;;    :hook (after-init . doom-modeline-mode))

;; --- Optional: Features Not Enabled ---
;; Uncomment the following lines if needed

;; (require 'emacsql-sqlite-builtin)
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/ess")
;; (load "ess-site")
;; (require 'org-ai)
;; (add-hook 'org-mode-hook #'org-ai-mode)
;; (org-ai-global-mode)
;; (setq spacious-padding-mode 1)
;; (setq browse-url-browser-function 'eww-browse-url)

;; --- Org-Roam Configuration ---
;; (use-package org-roam
;;   :ensure t
;;   :custom
;;   (org-roam-directory (file-truename "/home/aletheia/GitHub/admin/RoamNotes"))
;;   :bind (("C-c n l" . org-roam-buffer-toggle)
;;          ("C-c n f" . org-roam-node-find)
;;          ("C-c n i" . org-roam-node-insert))
;;   :config
;;   (org-roam-setup))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
