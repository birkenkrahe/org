;; FIXME: not the friendliest, but simple.
(require 'info)
(info-initialize)
(push "c:/Program Files/Emacs/emacs-29.1/share/info" Info-directory-list)

;; disable byte-compile-warnings for obsolete variables
(setq byte-compile-warnings (not 'obsolete))

(put 'dired-find-alternate-file 'disabled nil)
(put 'upcase-region 'disabled nil)
(setq inhibit-compacting-font-caches t)

;; prettify bullets
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; suggestions from Udemy Emacs course
;; https://www.udemy.com/course/learning-to-work-with-emacs/learn/lecture/13551146#overview
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("gnu" . "https://elpa.gnu.org/packages/") t)

;; remove startup screen - get it back with M-x about-emacs or C-h C-a
(setq inhibit-startup-screen nil)

;; remove menu bar - to bring it back: M-x menu-bar-mode (toggles)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; position startup frame
(setq default-frame-alist
      '((height . 40)
        (width . 70)
        (left . 550)
        (top . 25)
        (vertical-scroll-bars . nil)
        (horizontal-scroll-bars . nil)
        (tool-bar-lines . 0)))

;; re-indenting of whole buffer according to mode
(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max))
  )

;; require org-tempo so that <s <TAB> self-insert works
(require 'org-tempo)

;; display inline images by default
(setq org-display-inline-images t)
(setq org-redisplay-inline-images t)
(setq org-image-actual-width nil)

;; require ob-sqlite and ob-sql (for compilation in org src blocks) & tangle
(require 'ob-sqlite)
(require 'ob-sql)
(require 'ob-tangle)
(require 'ob-calc)
(require 'ob-octave)
(require 'ob-emacs-lisp)
(require 'ob-R)
(require 'ob-shell)
(require 'ob-python)
;;(require 'jupyter)
;; Syntax highlight code in your SRC blocks The last variable removes
;; the annoying “Do you want to execute” your code when you type:
;; C-c C-c
(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t)

;; enables Babel to process source blocks
(org-babel-do-load-languages
 'org-babel-load-languages '((python . t)
                             (C . t)
                             (js . t)
                             (perl . t)
                             (emacs-lisp . t)
                             (shell . t)
                             (css . t)
                             (R . t)
                             (sql . t)
                             ;;                      (jupyter . t)
                             ))

;; babel R skeleton code
(define-skeleton org-skeleton
  "Header info for a Emacs Org-mode file."
  "Title: "
  "#+TITLE:" str " \n"
  "#+AUTHOR:" str " \n"
  "#+SUBTITLE:" str " \n"
  "#+STARTUP:overview hideblocks indent\n"
  "#+OPTIONS: toc:nil num:nil ^:nil\n"
  "#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes"
  )
(global-set-key [C-S-f4] 'org-skeleton)

;; unfill region
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))

;; Handy key definition
(define-key global-map "\C-\M-Q" 'unfill-region)

;; initiate sequential work progress states see orgguide 9.3 sect. 5.2 p.11
(setq org-todo-keywords
      '((sequence "NEXT" "TODO" "IN PROGRESS" "READ" "WATCH" "WAITING" "SOMEDAY"  "NEW" "|" "DONE" "CANCELED")))
;;      (sequence "REPORT" "WAITING" "|" "DONE")
;;      (sequence "READ" "WATCH" "|" "CHECKED")))

;; set faces for org-mode keywords
(setq org-todo-keyword-faces
      '(("TODO" . "red")
        ("DONE" . "green")
        ("UPDATE" . "orange")
        ("CANCELED" . (:foreground "blue" :weight bold))))

;; set default target for notes orgguide 9.3 sec.9
(setq org-default-notes-file (concat org-directory "/OneDrive/org/notes.org"))
(put 'downcase-region 'disabled nil)

;; set font
;; Set default font
;; (set-face-attribute 'default nil
;;                     :family "Hack"
;;                     ;; :family "Source Code Pro"
;;                     :height 140
;;                     :weight 'normal
;;                     :width 'normal)

;; new with emacs 27 - to see PDF files
;; (push '("\\.pdf\\'" . emacs) org-file-apps)

;; allow region to be narrowed (buffer better to draw in)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)

;; smart completion
(require 'ivy)
(ivy-mode)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

;; smart window changing
(require 'ace-window)

;; enable ace-window for fast window switching
(global-set-key (kbd "M-o") 'ace-window)

;; show ace window key in mode line
;; with > 2 windows show it in red
(ace-window-display-mode 1)

;; fixes the "failed to download gnu archive" error
;; when running package-refresh-contents
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

;; make PuTTY's plink.exe the default way to use ssh
;; plink.exe must be in the PATH
;; (setq tramp-default-method "plink")
;; (setq tramp-default-user "pi")

;; set org-next-item (to move between bullet points) t
;; ---- clashes with ORG ROAM
;;(global-set-key (kbd "C-c n") 'org-next-item)
;;(global-set-key (kbd "C-c p") 'org-previous-item)

;; treat plain lists like low-level headings (collapse with 'overview')
(setq org-cycle-include-plain-lists 'integrate)

;; UTF-8 as default encoding
(set-language-environment "UTF-8")

;; Find and open TODO and agenda
(find-file "c:/Users/birkenkrahe/Documents/GitHub/admin/RoamNotes/20220520212655-todo.org")
(org-agenda nil "a")
(global-set-key (kbd "C-c a") 'org-agenda)
;; set agenda files
(setq org-agenda-files
      (list
       "c:/Users/birkenkrahe/Documents/GitHub/admin/RoamNotes/20220520212655-todo.org"
       "c:/Users/birkenkrahe/Documents/GitHub/admin/RoamNotes/20220521110355-spring23.org"
       "c:/Users/birkenkrahe/Documents/GitHub/admin/RoamNotes/20220913212745-fall23.org"
       "c:/Users/birkenkrahe/Documents/GitHub/admin/RoamNotes/20220521111244-spring24.org"))
;; switch on follow-mode (open TODO with ORG-AGENDA)
(setq org-agenda-follow-mode t)
;; switch on -mode (open TODO with ORG-AGENDA)
(setq org-agenda-follow-mode t)

;; Set new home directory ~/ in Emacs
;; (defun set-home-dir (dir)
;;   "Set a new HOME directory. This is where Emacs will look for init files and
;;     where '~' will default to."
;;   (setenv "HOME" dir)
;;   (message (format "HOME location is %s" (getenv "HOME"))))

;; (set-home-dir "C:/Users/birkenkrahe/Documents/GitHub/")

(setq-default line-spacing 6)
(setq-default org-hide-emphasis-markers t)
(setq org-html-validation-link t)
;; Show hidden emphasis markers
(use-package org-appear
  :hook (org-mode . org-appear-mode))

;; enable recentf mode and bind it to
(recentf-mode 1)
(global-set-key (kbd "C-x rf") 'recentf-open-files)

;; org-display-inline-images set to <f6>
(global-set-key (kbd "<f6>") 'org-display-inline-images)

;; org-remove-inline-images set to <f7>
(global-set-key (kbd "<f7>") 'org-remove-inline-images)

;; surround region from point to EOL with ~
(fset 'tt
      (kmacro-lambda-form [?~ ?\C-e ?~] 0 "%d"))

;; org-roam (via github.com/org-roam/org-roam
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "c:/Users/birkenkrahe/Documents/GitHub/admin/RoamNotes")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode))
                                        ;(org-roam-setup))
;; capture note for specific date: C-c n d v
;; view note for specific date: C-c n d c
;; go one note forward: C-c n d f
;; go one note backward: C-c n d b

(setq org-image-actual-width nil)

;;(save-place-mode 1)
;;(setq history-length 25)
;;(savehist-mode 1)

;; MODUS THEME CONFIG
;; region highlighting preserves syntax highlighting
;; (setq modus-themes-region '(bg-only))
;; (setq modus-themes-bold-constructs t)
;; (setq modus-themes-org-blocks 'gray-background)
;; ;; must org-mode-restart to see changes!
;; (setq modus-themes-org-blocks 'tinted-background)
;; (setq modus-themes-scale-headings t)
;; (setq modus-themes-headings
;;       '((1 . (rainbow overline background 1.4))
;;         (2 . (rainbow background 1.3))
;;         (3 . (rainbow bold 1.2))
;;         (4 . (semilight 1.1))))

;; Install org-present if needed
(unless (package-installed-p 'org-present)
  (package-install 'org-present))

;; Install visual-fill-column
(unless (package-installed-p 'visual-fill-column)
  (package-install 'visual-fill-column))

;; Configure fill-width
(setq visual-fill-column-width 110
      visual-fill-column-center-text t)

(defun my/org-present-start ()
  ;; Tweak font sizes
  ;; (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
  ;;                                    (header-line (:height 4.0) variable-pitch)
  ;;                                    (org-document-title (:height 1.75) org-document-title)
  ;;                                    (org-code (:height 1.55) org-code)
  ;;                                    (org-verbatim (:height 1.55) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block)
  ;;                                    (org-block-begin-line (:height 0.7) org-block)))
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))

;; Register hooks with org-present
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)

;; load Emacs-Speaks-Statistics (ESS) see ess.r-project.org
(add-to-list 'load-path "~/.emacs.d/elpa/ess-20221204.1348")
(load "ess-autoloads")

;; reveal.js
(use-package ox-reveal)

;; org-tree-slide
(require 'org-tree-slide)
(with-eval-after-load "org-tree-slide"
  (global-set-key (kbd "<f9>") 'org-tree-slide-mode)
  (define-key org-tree-slide-mode-map (kbd "<left>") 'org-tree-slide-move-previous-tree) ;; move forwards
  (define-key org-tree-slide-mode-map (kbd "<right>") 'org-tree-slide-move-next-tree)  ;; move backwards
  )
(setq org-image-actual-width nil)
(setq org-tree-slide-skip-outline-level 0)
(setq org-tree-slide-slide-effect t)
(org-tree-slide-simple-profile) ;; no headers

;; TAO dark theme for b/w coding
;; (load-theme 'tao-yin t)

;; start Emacs up full-screen
;; (toggle-frame-maximized)
;; (toggle-frame-fullscreen)

;; enable global hl line highlight
(setq global-hl-line-mode t)

;; bind fill-paragraph to M-q
;;(global-set-key "\M-q" 'org-fill-paragraph)

;; Emacs auto package update
(add-to-list 'load-path "/path/to/auto-package-update")
(require 'auto-package-update)

;; startup page(s) - default is split screen with agenda file
;; display-about-screen
;;(about-emacs)
;; display open files
(recentf-open-files)

;; delete TODO window
(delete-other-windows)

;; load mini-modeline-mode
;;(mini-modeline-mode)

;; set python-shell-interpreter
(setq python-shell-interpreter "c:/Users/birkenkrahe/AppData/Local/Programs/Python/Python311/python")

;; ox-ipynb converts org files to Jupyter Python notebooks
(load "~/.emacs.d/lisp/ox-ipynb.el")
(require 'ox-ipynb)

;; Python indent offset set to default
(setq python-indent-guess-indent-offset nil)

;; enable column-number-mode
(column-number-mode t)

;; enable rainbow-delimiters
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; use org-ai package
(use-package org-ai
  :ensure
  :commands (org-ai-mode org-ai-global-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode)
  (org-ai-global-mode))

;; enable automatic time-stamping
(add-hook 'before-save-hook 'time-stamp)

;; disable byte-compile-warnings for obsolete variables
(setq byte-compile-warnings (not 'obsolete))

;; load sql.el and disable sql-get-login if you only work on one db
(require 'sql)

;; new theme
(load-theme 'material t)            ;; Load material theme
;; (global-display-line-numbers-mode t) ;; Enable line numbers globally

